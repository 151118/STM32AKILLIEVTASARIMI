
STM32_MSTPFULL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab4  08007ab4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007abc  08007abc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000074  08007b38  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08007b38  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120fe  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbc  00000000  00000000  000321a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00034160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00035190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a39  00000000  00000000  00036148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ca6  00000000  00000000  00058b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da24b  00000000  00000000  0006b827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145a72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b4c  00000000  00000000  00145ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a2c 	.word	0x08007a2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007a2c 	.word	0x08007a2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96e 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8083 	bne.w	8000d02 <__udivmoddi4+0x116>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d947      	bls.n	8000c92 <__udivmoddi4+0xa6>
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	b142      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	f1c2 0020 	rsb	r0, r2, #32
 8000c0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c10:	4091      	lsls	r1, r2
 8000c12:	4097      	lsls	r7, r2
 8000c14:	ea40 0c01 	orr.w	ip, r0, r1
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbbc f6f8 	udiv	r6, ip, r8
 8000c24:	fa1f fe87 	uxth.w	lr, r7
 8000c28:	fb08 c116 	mls	r1, r8, r6, ip
 8000c2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c30:	fb06 f10e 	mul.w	r1, r6, lr
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 8119 	bcs.w	8000e74 <__udivmoddi4+0x288>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8116 	bls.w	8000e74 <__udivmoddi4+0x288>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	443b      	add	r3, r7
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 8105 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f240 8102 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	b902      	cbnz	r2, 8000c96 <__udivmoddi4+0xaa>
 8000c94:	deff      	udf	#255	; 0xff
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d150      	bne.n	8000d40 <__udivmoddi4+0x154>
 8000c9e:	1bcb      	subs	r3, r1, r7
 8000ca0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	2601      	movs	r6, #1
 8000caa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cae:	0c21      	lsrs	r1, r4, #16
 8000cb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000cc0:	1879      	adds	r1, r7, r1
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0xe2>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	f200 80e9 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1ac9      	subs	r1, r1, r3
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x10c>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x10a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80d9 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e7bf      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x12e>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80b1 	beq.w	8000e6e <__udivmoddi4+0x282>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x1cc>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0x140>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80b8 	bhi.w	8000e9c <__udivmoddi4+0x2b0>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	468c      	mov	ip, r1
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0a8      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000d3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3e:	e7a5      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f603 	lsr.w	r6, r0, r3
 8000d48:	4097      	lsls	r7, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d52:	40d9      	lsrs	r1, r3
 8000d54:	4330      	orrs	r0, r6
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f108 	mul.w	r1, r6, r8
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x19c>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d7a:	f080 808d 	bcs.w	8000e98 <__udivmoddi4+0x2ac>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 808a 	bls.w	8000e98 <__udivmoddi4+0x2ac>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b281      	uxth	r1, r0
 8000d8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d98:	fb00 f308 	mul.w	r3, r0, r8
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x1c4>
 8000da0:	1879      	adds	r1, r7, r1
 8000da2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da6:	d273      	bcs.n	8000e90 <__udivmoddi4+0x2a4>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d971      	bls.n	8000e90 <__udivmoddi4+0x2a4>
 8000dac:	3802      	subs	r0, #2
 8000dae:	4439      	add	r1, r7
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db6:	e778      	b.n	8000caa <__udivmoddi4+0xbe>
 8000db8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc4:	431c      	orrs	r4, r3
 8000dc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	0c3b      	lsrs	r3, r7, #16
 8000dda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dde:	fa1f f884 	uxth.w	r8, r4
 8000de2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dea:	fb09 fa08 	mul.w	sl, r9, r8
 8000dee:	458a      	cmp	sl, r1
 8000df0:	fa02 f206 	lsl.w	r2, r2, r6
 8000df4:	fa00 f306 	lsl.w	r3, r0, r6
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x220>
 8000dfa:	1861      	adds	r1, r4, r1
 8000dfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e00:	d248      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e02:	458a      	cmp	sl, r1
 8000e04:	d946      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4421      	add	r1, r4
 8000e0c:	eba1 010a 	sub.w	r1, r1, sl
 8000e10:	b2bf      	uxth	r7, r7
 8000e12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1e:	fb00 f808 	mul.w	r8, r0, r8
 8000e22:	45b8      	cmp	r8, r7
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x24a>
 8000e26:	19e7      	adds	r7, r4, r7
 8000e28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e2c:	d22e      	bcs.n	8000e8c <__udivmoddi4+0x2a0>
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d92c      	bls.n	8000e8c <__udivmoddi4+0x2a0>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4427      	add	r7, r4
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	eba7 0708 	sub.w	r7, r7, r8
 8000e3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e42:	454f      	cmp	r7, r9
 8000e44:	46c6      	mov	lr, r8
 8000e46:	4649      	mov	r1, r9
 8000e48:	d31a      	bcc.n	8000e80 <__udivmoddi4+0x294>
 8000e4a:	d017      	beq.n	8000e7c <__udivmoddi4+0x290>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x27a>
 8000e4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e52:	eb67 0701 	sbc.w	r7, r7, r1
 8000e56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e5a:	40f2      	lsrs	r2, r6
 8000e5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e60:	40f7      	lsrs	r7, r6
 8000e62:	e9c5 2700 	strd	r2, r7, [r5]
 8000e66:	2600      	movs	r6, #0
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e70b      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fd      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e7c:	4543      	cmp	r3, r8
 8000e7e:	d2e5      	bcs.n	8000e4c <__udivmoddi4+0x260>
 8000e80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e84:	eb69 0104 	sbc.w	r1, r9, r4
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7df      	b.n	8000e4c <__udivmoddi4+0x260>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e7d2      	b.n	8000e36 <__udivmoddi4+0x24a>
 8000e90:	4660      	mov	r0, ip
 8000e92:	e78d      	b.n	8000db0 <__udivmoddi4+0x1c4>
 8000e94:	4681      	mov	r9, r0
 8000e96:	e7b9      	b.n	8000e0c <__udivmoddi4+0x220>
 8000e98:	4666      	mov	r6, ip
 8000e9a:	e775      	b.n	8000d88 <__udivmoddi4+0x19c>
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e74a      	b.n	8000d36 <__udivmoddi4+0x14a>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	4439      	add	r1, r7
 8000ea6:	e713      	b.n	8000cd0 <__udivmoddi4+0xe4>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	443c      	add	r4, r7
 8000eac:	e724      	b.n	8000cf8 <__udivmoddi4+0x10c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <delay>:
void ADXL345_Read(uint8_t rRegister, uint8_t numberOfBytes);
void Sistem_ON();
void Sistem_OFF();
char rx[50];
void delay(uint16_t time)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <delay+0x30>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)< time);
 8000ec6:	bf00      	nop
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <delay+0x30>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d3f9      	bcc.n	8000ec8 <delay+0x14>
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000044c 	.word	0x2000044c

08000ee8 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef DHT11_DATA={0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

	DHT11_DATA.Pin=GPIO_Pin;
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Mode=GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
	DHT11_DATA.Pull=GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOx, &DHT11_DATA);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f002 fc64 	bl	80037e8 <HAL_GPIO_Init>
}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <Set_Pin_Input>:
void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef DHT11_DATA={0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

	DHT11_DATA.Pin=GPIO_Pin;
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Mode=GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
	DHT11_DATA.Pull=GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOx, &DHT11_DATA);
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f002 fc44 	bl	80037e8 <HAL_GPIO_Init>
}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <DHT11_Read>:
uint16_t mTime1 = 0,mTime2 = 0;
uint16_t mbit=0;
uint8_t parityVal=0, genParity=0;
int a = 15;
uint8_t DHT11_Read(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
	for(int a=0;a<40;a++) mData[a]=0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e007      	b.n	8000f84 <DHT11_Read+0x1c>
 8000f74:	4a8f      	ldr	r2, [pc, #572]	; (80011b4 <DHT11_Read+0x24c>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	4413      	add	r3, r2
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b27      	cmp	r3, #39	; 0x27
 8000f88:	ddf4      	ble.n	8000f74 <DHT11_Read+0xc>

		mTime1=0, mTime2=0, durum=0, tempVal=0, humVal=0, parityVal=0, genParity=0, mbit=0;
 8000f8a:	4b8b      	ldr	r3, [pc, #556]	; (80011b8 <DHT11_Read+0x250>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	801a      	strh	r2, [r3, #0]
 8000f90:	4b8a      	ldr	r3, [pc, #552]	; (80011bc <DHT11_Read+0x254>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	801a      	strh	r2, [r3, #0]
 8000f96:	4b8a      	ldr	r3, [pc, #552]	; (80011c0 <DHT11_Read+0x258>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	4b89      	ldr	r3, [pc, #548]	; (80011c4 <DHT11_Read+0x25c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	801a      	strh	r2, [r3, #0]
 8000fa2:	4b89      	ldr	r3, [pc, #548]	; (80011c8 <DHT11_Read+0x260>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	801a      	strh	r2, [r3, #0]
 8000fa8:	4b88      	ldr	r3, [pc, #544]	; (80011cc <DHT11_Read+0x264>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	4b88      	ldr	r3, [pc, #544]	; (80011d0 <DHT11_Read+0x268>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	4b87      	ldr	r3, [pc, #540]	; (80011d4 <DHT11_Read+0x26c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
		Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4886      	ldr	r0, [pc, #536]	; (80011d8 <DHT11_Read+0x270>)
 8000fbe:	f7ff ff93 	bl	8000ee8 <Set_Pin_Output>
		HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	4884      	ldr	r0, [pc, #528]	; (80011d8 <DHT11_Read+0x270>)
 8000fc8:	f002 fdc2 	bl	8003b50 <HAL_GPIO_WritePin>
		delay(18000);
 8000fcc:	f244 6050 	movw	r0, #18000	; 0x4650
 8000fd0:	f7ff ff70 	bl	8000eb4 <delay>
		Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	4880      	ldr	r0, [pc, #512]	; (80011d8 <DHT11_Read+0x270>)
 8000fd8:	f7ff ffa6 	bl	8000f28 <Set_Pin_Input>

		__HAL_TIM_SET_COUNTER(&htim6,0);
 8000fdc:	4b7f      	ldr	r3, [pc, #508]	; (80011dc <DHT11_Read+0x274>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)==GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6)>500) return 0;
 8000fe4:	e008      	b.n	8000ff8 <DHT11_Read+0x90>
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <DHT11_Read+0x274>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff2:	d901      	bls.n	8000ff8 <DHT11_Read+0x90>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e130      	b.n	800125a <DHT11_Read+0x2f2>
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4877      	ldr	r0, [pc, #476]	; (80011d8 <DHT11_Read+0x270>)
 8000ffc:	f002 fd90 	bl	8003b20 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d0ef      	beq.n	8000fe6 <DHT11_Read+0x7e>

		__HAL_TIM_SET_COUNTER(&htim6,0);
 8001006:	4b75      	ldr	r3, [pc, #468]	; (80011dc <DHT11_Read+0x274>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
	    while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)==GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6)>500) return 0;
 800100e:	e008      	b.n	8001022 <DHT11_Read+0xba>
 8001010:	4b72      	ldr	r3, [pc, #456]	; (80011dc <DHT11_Read+0x274>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	b29b      	uxth	r3, r3
 8001018:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800101c:	d901      	bls.n	8001022 <DHT11_Read+0xba>
 800101e:	2300      	movs	r3, #0
 8001020:	e11b      	b.n	800125a <DHT11_Read+0x2f2>
 8001022:	2110      	movs	r1, #16
 8001024:	486c      	ldr	r0, [pc, #432]	; (80011d8 <DHT11_Read+0x270>)
 8001026:	f002 fd7b 	bl	8003b20 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0ef      	beq.n	8001010 <DHT11_Read+0xa8>
	    mTime1 =(uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8001030:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <DHT11_Read+0x274>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b5f      	ldr	r3, [pc, #380]	; (80011b8 <DHT11_Read+0x250>)
 800103a:	801a      	strh	r2, [r3, #0]

	    __HAL_TIM_SET_COUNTER(&htim6,0);
 800103c:	4b67      	ldr	r3, [pc, #412]	; (80011dc <DHT11_Read+0x274>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
	    while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)==GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6)>500) return 0;
 8001044:	e008      	b.n	8001058 <DHT11_Read+0xf0>
 8001046:	4b65      	ldr	r3, [pc, #404]	; (80011dc <DHT11_Read+0x274>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	b29b      	uxth	r3, r3
 800104e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001052:	d901      	bls.n	8001058 <DHT11_Read+0xf0>
 8001054:	2300      	movs	r3, #0
 8001056:	e100      	b.n	800125a <DHT11_Read+0x2f2>
 8001058:	2110      	movs	r1, #16
 800105a:	485f      	ldr	r0, [pc, #380]	; (80011d8 <DHT11_Read+0x270>)
 800105c:	f002 fd60 	bl	8003b20 <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d0ef      	beq.n	8001046 <DHT11_Read+0xde>
	    mTime2 =(uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8001066:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <DHT11_Read+0x274>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <DHT11_Read+0x254>)
 8001070:	801a      	strh	r2, [r3, #0]

	    if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8001072:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <DHT11_Read+0x250>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	2b4a      	cmp	r3, #74	; 0x4a
 8001078:	d80d      	bhi.n	8001096 <DHT11_Read+0x12e>
 800107a:	4b4f      	ldr	r3, [pc, #316]	; (80011b8 <DHT11_Read+0x250>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	2b55      	cmp	r3, #85	; 0x55
 8001080:	d909      	bls.n	8001096 <DHT11_Read+0x12e>
 8001082:	4b4e      	ldr	r3, [pc, #312]	; (80011bc <DHT11_Read+0x254>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	2b4a      	cmp	r3, #74	; 0x4a
 8001088:	d805      	bhi.n	8001096 <DHT11_Read+0x12e>
 800108a:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <DHT11_Read+0x254>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	2b55      	cmp	r3, #85	; 0x55
 8001090:	d901      	bls.n	8001096 <DHT11_Read+0x12e>
	    {

	    	return 0;
 8001092:	2300      	movs	r3, #0
 8001094:	e0e1      	b.n	800125a <DHT11_Read+0x2f2>
	    }
	    for(int j=0; j<40; j++)
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	e051      	b.n	8001140 <DHT11_Read+0x1d8>
	    {
	    	__HAL_TIM_SET_COUNTER(&htim6,0);
 800109c:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <DHT11_Read+0x274>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
	    	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)==GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6)>500) return 0;
 80010a4:	e008      	b.n	80010b8 <DHT11_Read+0x150>
 80010a6:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <DHT11_Read+0x274>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010b2:	d901      	bls.n	80010b8 <DHT11_Read+0x150>
 80010b4:	2300      	movs	r3, #0
 80010b6:	e0d0      	b.n	800125a <DHT11_Read+0x2f2>
 80010b8:	2110      	movs	r1, #16
 80010ba:	4847      	ldr	r0, [pc, #284]	; (80011d8 <DHT11_Read+0x270>)
 80010bc:	f002 fd30 	bl	8003b20 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0ef      	beq.n	80010a6 <DHT11_Read+0x13e>
	    	__HAL_TIM_SET_COUNTER(&htim6,0);
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <DHT11_Read+0x274>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
	    	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)==GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6)>500) return 0;
 80010ce:	e008      	b.n	80010e2 <DHT11_Read+0x17a>
 80010d0:	4b42      	ldr	r3, [pc, #264]	; (80011dc <DHT11_Read+0x274>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010dc:	d901      	bls.n	80010e2 <DHT11_Read+0x17a>
 80010de:	2300      	movs	r3, #0
 80010e0:	e0bb      	b.n	800125a <DHT11_Read+0x2f2>
 80010e2:	2110      	movs	r1, #16
 80010e4:	483c      	ldr	r0, [pc, #240]	; (80011d8 <DHT11_Read+0x270>)
 80010e6:	f002 fd1b 	bl	8003b20 <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d0ef      	beq.n	80010d0 <DHT11_Read+0x168>
	    	mTime1=(uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <DHT11_Read+0x274>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <DHT11_Read+0x250>)
 80010fa:	801a      	strh	r2, [r3, #0]
	    	if(mTime1 >20 && mTime1<30)
 80010fc:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <DHT11_Read+0x250>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	2b14      	cmp	r3, #20
 8001102:	d907      	bls.n	8001114 <DHT11_Read+0x1ac>
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <DHT11_Read+0x250>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	2b1d      	cmp	r3, #29
 800110a:	d803      	bhi.n	8001114 <DHT11_Read+0x1ac>
	    	{
	    		mbit=0;
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <DHT11_Read+0x26c>)
 800110e:	2200      	movs	r2, #0
 8001110:	801a      	strh	r2, [r3, #0]
 8001112:	e00a      	b.n	800112a <DHT11_Read+0x1c2>
	    	}
	    	else if(mTime1>60 && mTime1<80)
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <DHT11_Read+0x250>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	2b3c      	cmp	r3, #60	; 0x3c
 800111a:	d906      	bls.n	800112a <DHT11_Read+0x1c2>
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <DHT11_Read+0x250>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b4f      	cmp	r3, #79	; 0x4f
 8001122:	d802      	bhi.n	800112a <DHT11_Read+0x1c2>
	    	{
	    		mbit=1;
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <DHT11_Read+0x26c>)
 8001126:	2201      	movs	r2, #1
 8001128:	801a      	strh	r2, [r3, #0]
	    	}
	    	mData[j]=mbit;
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <DHT11_Read+0x26c>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	b2d9      	uxtb	r1, r3
 8001130:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <DHT11_Read+0x24c>)
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	460a      	mov	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
	    for(int j=0; j<40; j++)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	3301      	adds	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	2b27      	cmp	r3, #39	; 0x27
 8001144:	ddaa      	ble.n	800109c <DHT11_Read+0x134>
	    }
	    for(int i=0;i <8;i++)
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e013      	b.n	8001174 <DHT11_Read+0x20c>
	    {
	    	humVal +=mData[i];
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <DHT11_Read+0x24c>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <DHT11_Read+0x260>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <DHT11_Read+0x260>)
 8001160:	801a      	strh	r2, [r3, #0]
	    	humVal=humVal<<1;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <DHT11_Read+0x260>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <DHT11_Read+0x260>)
 800116c:	801a      	strh	r2, [r3, #0]
	    for(int i=0;i <8;i++)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b07      	cmp	r3, #7
 8001178:	dde8      	ble.n	800114c <DHT11_Read+0x1e4>
	    }
	    for(int i=16;i <24;i++)
 800117a:	2310      	movs	r3, #16
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	e013      	b.n	80011a8 <DHT11_Read+0x240>
	   	    {
	   	    	tempVal +=mData[i];
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <DHT11_Read+0x24c>)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b29a      	uxth	r2, r3
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <DHT11_Read+0x25c>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <DHT11_Read+0x25c>)
 8001194:	801a      	strh	r2, [r3, #0]
	   	    	tempVal=tempVal<<1;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <DHT11_Read+0x25c>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <DHT11_Read+0x25c>)
 80011a0:	801a      	strh	r2, [r3, #0]
	    for(int i=16;i <24;i++)
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b17      	cmp	r3, #23
 80011ac:	dde8      	ble.n	8001180 <DHT11_Read+0x218>
	   	    }
	    for(int i=32;i <40;i++)
 80011ae:	2320      	movs	r3, #32
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e028      	b.n	8001206 <DHT11_Read+0x29e>
 80011b4:	200001f8 	.word	0x200001f8
 80011b8:	200000a4 	.word	0x200000a4
 80011bc:	200000a6 	.word	0x200000a6
 80011c0:	2000009c 	.word	0x2000009c
 80011c4:	200000a0 	.word	0x200000a0
 80011c8:	200000a2 	.word	0x200000a2
 80011cc:	200000aa 	.word	0x200000aa
 80011d0:	200000ab 	.word	0x200000ab
 80011d4:	200000a8 	.word	0x200000a8
 80011d8:	40020000 	.word	0x40020000
 80011dc:	2000044c 	.word	0x2000044c
	   	    {
	   	    	parityVal +=mData[i];
 80011e0:	4a20      	ldr	r2, [pc, #128]	; (8001264 <DHT11_Read+0x2fc>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <DHT11_Read+0x300>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <DHT11_Read+0x300>)
 80011f2:	701a      	strb	r2, [r3, #0]
	   	    	parityVal=parityVal<<1;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <DHT11_Read+0x300>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <DHT11_Read+0x300>)
 80011fe:	701a      	strb	r2, [r3, #0]
	    for(int i=32;i <40;i++)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3301      	adds	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b27      	cmp	r3, #39	; 0x27
 800120a:	dde9      	ble.n	80011e0 <DHT11_Read+0x278>
	   	    }
	    parityVal=parityVal >>1;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <DHT11_Read+0x300>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	085b      	lsrs	r3, r3, #1
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <DHT11_Read+0x300>)
 8001216:	701a      	strb	r2, [r3, #0]
	    humVal=humVal >>1;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <DHT11_Read+0x304>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <DHT11_Read+0x304>)
 8001222:	801a      	strh	r2, [r3, #0]
	    tempVal=tempVal >>1;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <DHT11_Read+0x308>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	085b      	lsrs	r3, r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <DHT11_Read+0x308>)
 800122e:	801a      	strh	r2, [r3, #0]
	    genParity=humVal+tempVal;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <DHT11_Read+0x304>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <DHT11_Read+0x308>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <DHT11_Read+0x30c>)
 8001242:	701a      	strb	r2, [r3, #0]
	    dhtval[0]=tempVal;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <DHT11_Read+0x308>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <DHT11_Read+0x310>)
 800124c:	701a      	strb	r2, [r3, #0]
	    dhtval[1]=humVal;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <DHT11_Read+0x304>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <DHT11_Read+0x310>)
 8001256:	705a      	strb	r2, [r3, #1]
	    return 1;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001f8 	.word	0x200001f8
 8001268:	200000aa 	.word	0x200000aa
 800126c:	200000a2 	.word	0x200000a2
 8001270:	200000a0 	.word	0x200000a0
 8001274:	200000ab 	.word	0x200000ab
 8001278:	200002a8 	.word	0x200002a8
 800127c:	00000000 	.word	0x00000000

08001280 <Read_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Read_ADC()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001284:	481a      	ldr	r0, [pc, #104]	; (80012f0 <Read_ADC+0x70>)
 8001286:	f001 fe41 	bl	8002f0c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100000)==HAL_OK)
 800128a:	491a      	ldr	r1, [pc, #104]	; (80012f4 <Read_ADC+0x74>)
 800128c:	4818      	ldr	r0, [pc, #96]	; (80012f0 <Read_ADC+0x70>)
 800128e:	f001 ff0f 	bl	80030b0 <HAL_ADC_PollForConversion>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d106      	bne.n	80012a6 <Read_ADC+0x26>
	adc_value=HAL_ADC_GetValue(&hadc1);
 8001298:	4815      	ldr	r0, [pc, #84]	; (80012f0 <Read_ADC+0x70>)
 800129a:	f001 ff94 	bl	80031c6 <HAL_ADC_GetValue>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <Read_ADC+0x78>)
 80012a4:	801a      	strh	r2, [r3, #0]
	Vadc=5.5*adc_value/4095;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <Read_ADC+0x78>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f932 	bl	8000514 <__aeabi_i2d>
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <Read_ADC+0x7c>)
 80012b6:	f7ff f997 	bl	80005e8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	a309      	add	r3, pc, #36	; (adr r3, 80012e8 <Read_ADC+0x68>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fab8 	bl	800083c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc22 	bl	8000b1c <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <Read_ADC+0x80>)
 80012dc:	6013      	str	r3, [r2, #0]
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	00000000 	.word	0x00000000
 80012ec:	40affe00 	.word	0x40affe00
 80012f0:	200003a8 	.word	0x200003a8
 80012f4:	000186a0 	.word	0x000186a0
 80012f8:	200002a4 	.word	0x200002a4
 80012fc:	40160000 	.word	0x40160000
 8001300:	200003f0 	.word	0x200003f0
 8001304:	00000000 	.word	0x00000000

08001308 <Readd_ADC>:
void Readd_ADC()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 800130c:	481a      	ldr	r0, [pc, #104]	; (8001378 <Readd_ADC+0x70>)
 800130e:	f001 fdfd 	bl	8002f0c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc2, 100000)==HAL_OK)
 8001312:	491a      	ldr	r1, [pc, #104]	; (800137c <Readd_ADC+0x74>)
 8001314:	4818      	ldr	r0, [pc, #96]	; (8001378 <Readd_ADC+0x70>)
 8001316:	f001 fecb 	bl	80030b0 <HAL_ADC_PollForConversion>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d106      	bne.n	800132e <Readd_ADC+0x26>
	adcc_value=HAL_ADC_GetValue(&hadc2);
 8001320:	4815      	ldr	r0, [pc, #84]	; (8001378 <Readd_ADC+0x70>)
 8001322:	f001 ff50 	bl	80031c6 <HAL_ADC_GetValue>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <Readd_ADC+0x78>)
 800132c:	801a      	strh	r2, [r3, #0]
	Vadcc=5.5*adcc_value/4095;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <Readd_ADC+0x78>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f8ee 	bl	8000514 <__aeabi_i2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <Readd_ADC+0x7c>)
 800133e:	f7ff f953 	bl	80005e8 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	a309      	add	r3, pc, #36	; (adr r3, 8001370 <Readd_ADC+0x68>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa74 	bl	800083c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fbde 	bl	8000b1c <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <Readd_ADC+0x80>)
 8001364:	6013      	str	r3, [r2, #0]
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	40affe00 	.word	0x40affe00
 8001378:	20000154 	.word	0x20000154
 800137c:	000186a0 	.word	0x000186a0
 8001380:	20000440 	.word	0x20000440
 8001384:	40160000 	.word	0x40160000
 8001388:	20000150 	.word	0x20000150

0800138c <Deprem_ON>:

void Deprem_ON()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
    if (zG<= 1.000)
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <Deprem_ON+0xb4>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800139a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d833      	bhi.n	800140c <Deprem_ON+0x80>
	 {
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013aa:	4826      	ldr	r0, [pc, #152]	; (8001444 <Deprem_ON+0xb8>)
 80013ac:	f002 fbd0 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_Delay(100);
 80013b0:	2064      	movs	r0, #100	; 0x64
 80013b2:	f001 fd43 	bl	8002e3c <HAL_Delay>
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013bc:	4821      	ldr	r0, [pc, #132]	; (8001444 <Deprem_ON+0xb8>)
 80013be:	f002 fbc7 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c8:	481f      	ldr	r0, [pc, #124]	; (8001448 <Deprem_ON+0xbc>)
 80013ca:	f002 fbc1 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_Delay(360);
 80013ce:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80013d2:	f001 fd33 	bl	8002e3c <HAL_Delay>
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013dc:	481a      	ldr	r0, [pc, #104]	; (8001448 <Deprem_ON+0xbc>)
 80013de:	f002 fbb7 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_Delay(720);
 80013e2:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 80013e6:	f001 fd29 	bl	8002e3c <HAL_Delay>
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f0:	4815      	ldr	r0, [pc, #84]	; (8001448 <Deprem_ON+0xbc>)
 80013f2:	f002 fbad 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_Delay(360);
 80013f6:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80013fa:	f001 fd1f 	bl	8002e3c <HAL_Delay>
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001404:	4810      	ldr	r0, [pc, #64]	; (8001448 <Deprem_ON+0xbc>)
 8001406:	f002 fba3 	bl	8003b50 <HAL_GPIO_WritePin>
    else if(zG> 1.00)
     {
		     HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_RESET);
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
     }
}
 800140a:	e016      	b.n	800143a <Deprem_ON+0xae>
    else if(zG> 1.00)
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <Deprem_ON+0xb4>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	dc00      	bgt.n	8001422 <Deprem_ON+0x96>
}
 8001420:	e00b      	b.n	800143a <Deprem_ON+0xae>
		     HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <Deprem_ON+0xb8>)
 800142a:	f002 fb91 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <Deprem_ON+0xbc>)
 8001436:	f002 fb8b 	bl	8003b50 <HAL_GPIO_WritePin>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200001f4 	.word	0x200001f4
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000

0800144c <Deprem_OFF>:
void Deprem_OFF()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	 if (zG<= 1.000)
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <Deprem_OFF+0x50>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800145a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d80c      	bhi.n	800147e <Deprem_OFF+0x32>
     {
             HAL_GPIO_WritePin(GPIOD,   GPIO_PIN_12, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <Deprem_OFF+0x54>)
 800146c:	f002 fb70 	bl	8003b50 <HAL_GPIO_WritePin>
             HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001476:	480b      	ldr	r0, [pc, #44]	; (80014a4 <Deprem_OFF+0x58>)
 8001478:	f002 fb6a 	bl	8003b50 <HAL_GPIO_WritePin>
     else
     {
             HAL_GPIO_WritePin(GPIOD,   GPIO_PIN_12, GPIO_PIN_RESET);
             HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
     }
}
 800147c:	e00b      	b.n	8001496 <Deprem_OFF+0x4a>
             HAL_GPIO_WritePin(GPIOD,   GPIO_PIN_12, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <Deprem_OFF+0x54>)
 8001486:	f002 fb63 	bl	8003b50 <HAL_GPIO_WritePin>
             HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <Deprem_OFF+0x58>)
 8001492:	f002 fb5d 	bl	8003b50 <HAL_GPIO_WritePin>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001f4 	.word	0x200001f4
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000

080014a8 <Ldr_ON>:
void Ldr_ON()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	 if(Vadc<2.7)
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <Ldr_ON+0x68>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f841 	bl	8000538 <__aeabi_f2d>
 80014b6:	a314      	add	r3, pc, #80	; (adr r3, 8001508 <Ldr_ON+0x60>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff fb06 	bl	8000acc <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <Ldr_ON+0x2a>
     {
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014cc:	4811      	ldr	r0, [pc, #68]	; (8001514 <Ldr_ON+0x6c>)
 80014ce:	f002 fb3f 	bl	8003b50 <HAL_GPIO_WritePin>


	 }
    if(Vadc>2.7)
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <Ldr_ON+0x68>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f82e 	bl	8000538 <__aeabi_f2d>
 80014dc:	a30a      	add	r3, pc, #40	; (adr r3, 8001508 <Ldr_ON+0x60>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff fb11 	bl	8000b08 <__aeabi_dcmpgt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d100      	bne.n	80014ee <Ldr_ON+0x46>
    {
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
		     HAL_Delay(20);
    }
}
 80014ec:	e008      	b.n	8001500 <Ldr_ON+0x58>
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <Ldr_ON+0x6c>)
 80014f6:	f002 fb2b 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_Delay(20);
 80014fa:	2014      	movs	r0, #20
 80014fc:	f001 fc9e 	bl	8002e3c <HAL_Delay>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f3af 8000 	nop.w
 8001508:	9999999a 	.word	0x9999999a
 800150c:	40059999 	.word	0x40059999
 8001510:	200003f0 	.word	0x200003f0
 8001514:	40020c00 	.word	0x40020c00

08001518 <Ldr_OFF>:
void Ldr_OFF()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    if(Vadc<2.7)
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <Ldr_OFF+0x70>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f809 	bl	8000538 <__aeabi_f2d>
 8001526:	a316      	add	r3, pc, #88	; (adr r3, 8001580 <Ldr_OFF+0x68>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff face 	bl	8000acc <__aeabi_dcmplt>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <Ldr_OFF+0x30>
   	{
   		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <Ldr_OFF+0x74>)
 800153e:	f002 fb07 	bl	8003b50 <HAL_GPIO_WritePin>
   	         HAL_Delay(20);
 8001542:	2014      	movs	r0, #20
 8001544:	f001 fc7a 	bl	8002e3c <HAL_Delay>
   }
 	  if(Vadc>2.7)
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <Ldr_OFF+0x70>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fff3 	bl	8000538 <__aeabi_f2d>
 8001552:	a30b      	add	r3, pc, #44	; (adr r3, 8001580 <Ldr_OFF+0x68>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff fad6 	bl	8000b08 <__aeabi_dcmpgt>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d100      	bne.n	8001564 <Ldr_OFF+0x4c>
      {
 	         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
		     HAL_Delay(20);
     }
}
 8001562:	e008      	b.n	8001576 <Ldr_OFF+0x5e>
 	         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <Ldr_OFF+0x74>)
 800156c:	f002 faf0 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_Delay(20);
 8001570:	2014      	movs	r0, #20
 8001572:	f001 fc63 	bl	8002e3c <HAL_Delay>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	9999999a 	.word	0x9999999a
 8001584:	40059999 	.word	0x40059999
 8001588:	200003f0 	.word	0x200003f0
 800158c:	40020c00 	.word	0x40020c00

08001590 <Hareket_ON>:
void Hareket_ON()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8) == GPIO_PIN_SET)
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	4820      	ldr	r0, [pc, #128]	; (800161c <Hareket_ON+0x8c>)
 800159a:	f002 fac1 	bl	8003b20 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d125      	bne.n	80015f0 <Hareket_ON+0x60>
	 {
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015aa:	481d      	ldr	r0, [pc, #116]	; (8001620 <Hareket_ON+0x90>)
 80015ac:	f002 fad0 	bl	8003b50 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2102      	movs	r1, #2
 80015b4:	481a      	ldr	r0, [pc, #104]	; (8001620 <Hareket_ON+0x90>)
 80015b6:	f002 facb 	bl	8003b50 <HAL_GPIO_WritePin>
		   HAL_Delay(360);
 80015ba:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80015be:	f001 fc3d 	bl	8002e3c <HAL_Delay>
	       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2102      	movs	r1, #2
 80015c6:	4816      	ldr	r0, [pc, #88]	; (8001620 <Hareket_ON+0x90>)
 80015c8:	f002 fac2 	bl	8003b50 <HAL_GPIO_WritePin>
		   HAL_Delay(720);
 80015cc:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 80015d0:	f001 fc34 	bl	8002e3c <HAL_Delay>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2102      	movs	r1, #2
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <Hareket_ON+0x90>)
 80015da:	f002 fab9 	bl	8003b50 <HAL_GPIO_WritePin>
		   HAL_Delay(360);
 80015de:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80015e2:	f001 fc2b 	bl	8002e3c <HAL_Delay>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2102      	movs	r1, #2
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <Hareket_ON+0x90>)
 80015ec:	f002 fab0 	bl	8003b50 <HAL_GPIO_WritePin>
	}
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8) == GPIO_PIN_RESET)
 80015f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <Hareket_ON+0x8c>)
 80015f6:	f002 fa93 	bl	8003b20 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10a      	bne.n	8001616 <Hareket_ON+0x86>
    {
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <Hareket_ON+0x90>)
 8001608:	f002 faa2 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2102      	movs	r1, #2
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <Hareket_ON+0x90>)
 8001612:	f002 fa9d 	bl	8003b50 <HAL_GPIO_WritePin>
    }
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40020c00 	.word	0x40020c00

08001624 <Hareket_OFF>:
void Hareket_OFF()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	 if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8) == GPIO_PIN_RESET)
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	4811      	ldr	r0, [pc, #68]	; (8001674 <Hareket_OFF+0x50>)
 800162e:	f002 fa77 	bl	8003b20 <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10b      	bne.n	8001650 <Hareket_OFF+0x2c>
     {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <Hareket_OFF+0x54>)
 8001640:	f002 fa86 	bl	8003b50 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2102      	movs	r1, #2
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <Hareket_OFF+0x54>)
 800164a:	f002 fa81 	bl	8003b50 <HAL_GPIO_WritePin>
 800164e:	e004      	b.n	800165a <Hareket_OFF+0x36>
     }
	 else if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8) == GPIO_PIN_SET);
 8001650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <Hareket_OFF+0x50>)
 8001656:	f002 fa63 	bl	8003b20 <HAL_GPIO_ReadPin>
	{
		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <Hareket_OFF+0x54>)
 8001662:	f002 fa75 	bl	8003b50 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2102      	movs	r1, #2
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <Hareket_OFF+0x54>)
 800166c:	f002 fa70 	bl	8003b50 <HAL_GPIO_WritePin>
	}
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	40020c00 	.word	0x40020c00

0800167c <Gaz_ON>:
void Gaz_ON()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	if(adcc_value>2000)
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <Gaz_ON+0x88>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001688:	d92d      	bls.n	80016e6 <Gaz_ON+0x6a>
   {
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001690:	481d      	ldr	r0, [pc, #116]	; (8001708 <Gaz_ON+0x8c>)
 8001692:	f002 fa5d 	bl	8003b50 <HAL_GPIO_WritePin>
			 HAL_Delay(20);
 8001696:	2014      	movs	r0, #20
 8001698:	f001 fbd0 	bl	8002e3c <HAL_Delay>
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a2:	481a      	ldr	r0, [pc, #104]	; (800170c <Gaz_ON+0x90>)
 80016a4:	f002 fa54 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_Delay(360);
 80016a8:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80016ac:	f001 fbc6 	bl	8002e3c <HAL_Delay>
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b6:	4815      	ldr	r0, [pc, #84]	; (800170c <Gaz_ON+0x90>)
 80016b8:	f002 fa4a 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_Delay(720);
 80016bc:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 80016c0:	f001 fbbc 	bl	8002e3c <HAL_Delay>
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ca:	4810      	ldr	r0, [pc, #64]	; (800170c <Gaz_ON+0x90>)
 80016cc:	f002 fa40 	bl	8003b50 <HAL_GPIO_WritePin>
		     HAL_Delay(360);
 80016d0:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80016d4:	f001 fbb2 	bl	8002e3c <HAL_Delay>
		     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <Gaz_ON+0x90>)
 80016e0:	f002 fa36 	bl	8003b50 <HAL_GPIO_WritePin>
   {

		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
    }
}
 80016e4:	e00b      	b.n	80016fe <Gaz_ON+0x82>
		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <Gaz_ON+0x8c>)
 80016ee:	f002 fa2f 	bl	8003b50 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <Gaz_ON+0x90>)
 80016fa:	f002 fa29 	bl	8003b50 <HAL_GPIO_WritePin>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000440 	.word	0x20000440
 8001708:	40020c00 	.word	0x40020c00
 800170c:	40021000 	.word	0x40021000

08001710 <Gaz_OFF>:
void Gaz_OFF()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <Gaz_OFF+0x20>)
 800171c:	f002 fa18 	bl	8003b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <Gaz_OFF+0x24>)
 8001728:	f002 fa12 	bl	8003b50 <HAL_GPIO_WritePin>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	40020c00 	.word	0x40020c00

08001738 <Fire_ON>:
void Fire_ON()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	//yangın sensörü
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7)==GPIO_PIN_RESET)
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	4822      	ldr	r0, [pc, #136]	; (80017c8 <Fire_ON+0x90>)
 8001740:	f002 f9ee 	bl	8003b20 <HAL_GPIO_ReadPin>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d129      	bne.n	800179e <Fire_ON+0x66>
	     {
		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001750:	481e      	ldr	r0, [pc, #120]	; (80017cc <Fire_ON+0x94>)
 8001752:	f002 f9fd 	bl	8003b50 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175c:	481a      	ldr	r0, [pc, #104]	; (80017c8 <Fire_ON+0x90>)
 800175e:	f002 f9f7 	bl	8003b50 <HAL_GPIO_WritePin>
		    HAL_Delay(360);
 8001762:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8001766:	f001 fb69 	bl	8002e3c <HAL_Delay>
		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001770:	4815      	ldr	r0, [pc, #84]	; (80017c8 <Fire_ON+0x90>)
 8001772:	f002 f9ed 	bl	8003b50 <HAL_GPIO_WritePin>
		    HAL_Delay(720);
 8001776:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 800177a:	f001 fb5f 	bl	8002e3c <HAL_Delay>
		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	4810      	ldr	r0, [pc, #64]	; (80017c8 <Fire_ON+0x90>)
 8001786:	f002 f9e3 	bl	8003b50 <HAL_GPIO_WritePin>
	        HAL_Delay(360);
 800178a:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800178e:	f001 fb55 	bl	8002e3c <HAL_Delay>
		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <Fire_ON+0x90>)
 800179a:	f002 f9d9 	bl	8003b50 <HAL_GPIO_WritePin>

		 }
if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7)==GPIO_PIN_SET)
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <Fire_ON+0x90>)
 80017a2:	f002 f9bd 	bl	8003b20 <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10b      	bne.n	80017c4 <Fire_ON+0x8c>
    {
	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <Fire_ON+0x94>)
 80017b4:	f002 f9cc 	bl	8003b50 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017be:	4802      	ldr	r0, [pc, #8]	; (80017c8 <Fire_ON+0x90>)
 80017c0:	f002 f9c6 	bl	8003b50 <HAL_GPIO_WritePin>
     }
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40020c00 	.word	0x40020c00

080017d0 <Fire_OFF>:
void Fire_OFF()
{  //YANGIN SENSÖRÜ
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	       HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <Fire_OFF+0x20>)
 80017dc:	f002 f9b8 	bl	8003b50 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <Fire_OFF+0x24>)
 80017e8:	f002 f9b2 	bl	8003b50 <HAL_GPIO_WritePin>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40021000 	.word	0x40021000

080017f8 <Garaj_ON>:
void Garaj_ON()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	 if(limit>=dis1)
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <Garaj_ON+0x60>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <Garaj_ON+0x64>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	db10      	blt.n	800183a <Garaj_ON+0x42>
   {
    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,500);
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <Garaj_ON+0x68>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_Delay(100);
 8001822:	2064      	movs	r0, #100	; 0x64
 8001824:	f001 fb0a 	bl	8002e3c <HAL_Delay>
   __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1500); //MOTOR HCSR
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <Garaj_ON+0x68>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c
   HAL_Delay(200);
 8001832:	20c8      	movs	r0, #200	; 0xc8
 8001834:	f001 fb02 	bl	8002e3c <HAL_Delay>
    {
       __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1500);
	  HAL_Delay(100);
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,500);
  }
}
 8001838:	e00c      	b.n	8001854 <Garaj_ON+0x5c>
       __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1500);
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <Garaj_ON+0x68>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(100);
 8001844:	2064      	movs	r0, #100	; 0x64
 8001846:	f001 faf9 	bl	8002e3c <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,500);
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <Garaj_ON+0x68>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000000 	.word	0x20000000
 800185c:	2000019c 	.word	0x2000019c
 8001860:	20000108 	.word	0x20000108

08001864 <Garaj_OFF>:
void Garaj_OFF()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	 if(limit>=dis1)
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <Garaj_OFF+0x48>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <Garaj_OFF+0x4c>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	db08      	blt.n	8001896 <Garaj_OFF+0x32>
  {
   __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1500);
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <Garaj_OFF+0x50>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800188c:	63da      	str	r2, [r3, #60]	; 0x3c
   HAL_Delay(100);
 800188e:	2064      	movs	r0, #100	; 0x64
 8001890:	f001 fad4 	bl	8002e3c <HAL_Delay>
	 else
   {
      __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1500);
	  HAL_Delay(100);
 }
}
 8001894:	e007      	b.n	80018a6 <Garaj_OFF+0x42>
      __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1500);
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <Garaj_OFF+0x50>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(100);
 80018a0:	2064      	movs	r0, #100	; 0x64
 80018a2:	f001 facb 	bl	8002e3c <HAL_Delay>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000000 	.word	0x20000000
 80018b0:	2000019c 	.word	0x2000019c
 80018b4:	20000108 	.word	0x20000108

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018be:	f001 fa4b 	bl	8002d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c2:	f000 fae9 	bl	8001e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c6:	f000 fdff 	bl	80024c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018ca:	f000 fdd3 	bl	8002474 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80018ce:	f000 fcd3 	bl	8002278 <MX_TIM6_Init>
  MX_TIM11_Init();
 80018d2:	f000 fd81 	bl	80023d8 <MX_TIM11_Init>
  MX_TIM8_Init();
 80018d6:	f000 fd05 	bl	80022e4 <MX_TIM8_Init>
  MX_ADC1_Init();
 80018da:	f000 fb47 	bl	8001f6c <MX_ADC1_Init>
  MX_I2C1_Init();
 80018de:	f000 fbe9 	bl	80020b4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80018e2:	f000 fc15 	bl	8002110 <MX_TIM3_Init>
  MX_ADC2_Init();
 80018e6:	f000 fb93 	bl	8002010 <MX_ADC2_Init>
  MX_TIM4_Init();
 80018ea:	f000 fc6b 	bl	80021c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Scan_I2C_Address();
 80018ee:	f000 fe9f 	bl	8002630 <Scan_I2C_Address>
  ADX345_Init();
 80018f2:	f000 fef7 	bl	80026e4 <ADX345_Init>
  HAL_TIM_Base_Start(&htim6);
 80018f6:	48bc      	ldr	r0, [pc, #752]	; (8001be8 <main+0x330>)
 80018f8:	f003 feba 	bl	8005670 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 80018fc:	48bb      	ldr	r0, [pc, #748]	; (8001bec <main+0x334>)
 80018fe:	f003 feb7 	bl	8005670 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 8001902:	48bb      	ldr	r0, [pc, #748]	; (8001bf0 <main+0x338>)
 8001904:	f003 feb4 	bl	8005670 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim11,  TIM_CHANNEL_1);
 8001908:	2100      	movs	r1, #0
 800190a:	48b9      	ldr	r0, [pc, #740]	; (8001bf0 <main+0x338>)
 800190c:	f003 ff68 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001910:	2108      	movs	r1, #8
 8001912:	48b8      	ldr	r0, [pc, #736]	; (8001bf4 <main+0x33c>)
 8001914:	f003 ff64 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001918:	210c      	movs	r1, #12
 800191a:	48b6      	ldr	r0, [pc, #728]	; (8001bf4 <main+0x33c>)
 800191c:	f003 ff60 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001920:	2104      	movs	r1, #4
 8001922:	48b4      	ldr	r0, [pc, #720]	; (8001bf4 <main+0x33c>)
 8001924:	f003 ff5c 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,  TIM_CHANNEL_3);
 8001928:	2108      	movs	r1, #8
 800192a:	48b3      	ldr	r0, [pc, #716]	; (8001bf8 <main+0x340>)
 800192c:	f003 ff58 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 8001930:	2100      	movs	r1, #0
 8001932:	48ae      	ldr	r0, [pc, #696]	; (8001bec <main+0x334>)
 8001934:	f004 f876 	bl	8005a24 <HAL_TIM_IC_Start>

  TIM11->CCR1=3;
 8001938:	4bb0      	ldr	r3, [pc, #704]	; (8001bfc <main+0x344>)
 800193a:	2203      	movs	r2, #3
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Read_ADC();
 800193e:	f7ff fc9f 	bl	8001280 <Read_ADC>
	  Readd_ADC();
 8001942:	f7ff fce1 	bl	8001308 <Readd_ADC>
	  ADXL345_Read(0x32, 6);
 8001946:	2106      	movs	r1, #6
 8001948:	2032      	movs	r0, #50	; 0x32
 800194a:	f000 fead 	bl	80026a8 <ADXL345_Read>
	  x= (myDatas[1] << 8) | myDatas[0] ; // x value in myDatas[0] myDatas[1];
 800194e:	4bac      	ldr	r3, [pc, #688]	; (8001c00 <main+0x348>)
 8001950:	785b      	ldrb	r3, [r3, #1]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b21a      	sxth	r2, r3
 8001956:	4baa      	ldr	r3, [pc, #680]	; (8001c00 <main+0x348>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b21b      	sxth	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b21a      	sxth	r2, r3
 8001960:	4ba8      	ldr	r3, [pc, #672]	; (8001c04 <main+0x34c>)
 8001962:	801a      	strh	r2, [r3, #0]
	  y= (myDatas[3] << 8) | myDatas[2] ; // x value in myDatas[2] myDatas[3];
 8001964:	4ba6      	ldr	r3, [pc, #664]	; (8001c00 <main+0x348>)
 8001966:	78db      	ldrb	r3, [r3, #3]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	4ba4      	ldr	r3, [pc, #656]	; (8001c00 <main+0x348>)
 800196e:	789b      	ldrb	r3, [r3, #2]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	4ba4      	ldr	r3, [pc, #656]	; (8001c08 <main+0x350>)
 8001978:	801a      	strh	r2, [r3, #0]
	  z= (myDatas[5] << 8) | myDatas[4] ; // x value in myDatas[5] myDatas[4];
 800197a:	4ba1      	ldr	r3, [pc, #644]	; (8001c00 <main+0x348>)
 800197c:	795b      	ldrb	r3, [r3, #5]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	4b9f      	ldr	r3, [pc, #636]	; (8001c00 <main+0x348>)
 8001984:	791b      	ldrb	r3, [r3, #4]
 8001986:	b21b      	sxth	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b21a      	sxth	r2, r3
 800198c:	4b9f      	ldr	r3, [pc, #636]	; (8001c0c <main+0x354>)
 800198e:	801a      	strh	r2, [r3, #0]
	  xG=x* .0087;
 8001990:	4b9c      	ldr	r3, [pc, #624]	; (8001c04 <main+0x34c>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdbc 	bl	8000514 <__aeabi_i2d>
 800199c:	a390      	add	r3, pc, #576	; (adr r3, 8001be0 <main+0x328>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fe21 	bl	80005e8 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff f8b5 	bl	8000b1c <__aeabi_d2f>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a96      	ldr	r2, [pc, #600]	; (8001c10 <main+0x358>)
 80019b6:	6013      	str	r3, [r2, #0]
	  yG=y* .0087;
 80019b8:	4b93      	ldr	r3, [pc, #588]	; (8001c08 <main+0x350>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fda8 	bl	8000514 <__aeabi_i2d>
 80019c4:	a386      	add	r3, pc, #536	; (adr r3, 8001be0 <main+0x328>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fe0d 	bl	80005e8 <__aeabi_dmul>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f8a1 	bl	8000b1c <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a8d      	ldr	r2, [pc, #564]	; (8001c14 <main+0x35c>)
 80019de:	6013      	str	r3, [r2, #0]
	  zG=z* .0087;
 80019e0:	4b8a      	ldr	r3, [pc, #552]	; (8001c0c <main+0x354>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd94 	bl	8000514 <__aeabi_i2d>
 80019ec:	a37c      	add	r3, pc, #496	; (adr r3, 8001be0 <main+0x328>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fdf9 	bl	80005e8 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f88d 	bl	8000b1c <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a84      	ldr	r2, [pc, #528]	; (8001c18 <main+0x360>)
 8001a06:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 8001a08:	200a      	movs	r0, #10
 8001a0a:	f001 fa17 	bl	8002e3c <HAL_Delay>
	  HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 100);
 8001a0e:	2364      	movs	r3, #100	; 0x64
 8001a10:	2232      	movs	r2, #50	; 0x32
 8001a12:	4982      	ldr	r1, [pc, #520]	; (8001c1c <main+0x364>)
 8001a14:	4882      	ldr	r0, [pc, #520]	; (8001c20 <main+0x368>)
 8001a16:	f005 f8d0 	bl	8006bba <HAL_UART_Receive>
	  durum=DHT11_Read();
 8001a1a:	f7ff faa5 	bl	8000f68 <DHT11_Read>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b80      	ldr	r3, [pc, #512]	; (8001c24 <main+0x36c>)
 8001a24:	701a      	strb	r2, [r3, #0]
			  if(durum==1)
 8001a26:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <main+0x36c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d113      	bne.n	8001a56 <main+0x19e>
			  {
				  Temperature=tempVal;
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <main+0x370>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b7d      	ldr	r3, [pc, #500]	; (8001c2c <main+0x374>)
 8001a36:	701a      	strb	r2, [r3, #0]
				  Humidity=humVal;
 8001a38:	4b7d      	ldr	r3, [pc, #500]	; (8001c30 <main+0x378>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b7d      	ldr	r3, [pc, #500]	; (8001c34 <main+0x37c>)
 8001a40:	701a      	strb	r2, [r3, #0]
				  hum=humVal;
 8001a42:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <main+0x378>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <main+0x380>)
 8001a4a:	601a      	str	r2, [r3, #0]
				  tem=tempVal;
 8001a4c:	4b76      	ldr	r3, [pc, #472]	; (8001c28 <main+0x370>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <main+0x384>)
 8001a54:	601a      	str	r2, [r3, #0]
			  }
			    if(durum==1)
 8001a56:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <main+0x36c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d110      	bne.n	8001a80 <main+0x1c8>
			 {
				    uint16_t len = sprintf(sendData, "Nem Değeri: %d\n Sıcaklık: %d\n\r", dhtval[1], dhtval[0]);
 8001a5e:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <main+0x388>)
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <main+0x388>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4976      	ldr	r1, [pc, #472]	; (8001c44 <main+0x38c>)
 8001a6a:	4877      	ldr	r0, [pc, #476]	; (8001c48 <main+0x390>)
 8001a6c:	f005 fbb0 	bl	80071d0 <siprintf>
 8001a70:	4603      	mov	r3, r0
 8001a72:	80fb      	strh	r3, [r7, #6]
				     //send data with UART
				     HAL_UART_Transmit(&huart2, (uint8_t*)sendData, len, 100);
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	2364      	movs	r3, #100	; 0x64
 8001a78:	4973      	ldr	r1, [pc, #460]	; (8001c48 <main+0x390>)
 8001a7a:	4869      	ldr	r0, [pc, #420]	; (8001c20 <main+0x368>)
 8001a7c:	f005 f80b 	bl	8006a96 <HAL_UART_Transmit>
				     //    HAL_Delay(1000);
			   }
			  if(HAL_GetTick()-delayy >= 100)//hcsr
 8001a80:	f001 f9d0 	bl	8002e24 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b71      	ldr	r3, [pc, #452]	; (8001c4c <main+0x394>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b63      	cmp	r3, #99	; 0x63
 8001a8e:	d918      	bls.n	8001ac2 <main+0x20a>
		      {
				  delayy=HAL_GetTick();
 8001a90:	f001 f9c8 	bl	8002e24 <HAL_GetTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a6d      	ldr	r2, [pc, #436]	; (8001c4c <main+0x394>)
 8001a98:	6013      	str	r3, [r2, #0]
				  echo1=HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4853      	ldr	r0, [pc, #332]	; (8001bec <main+0x334>)
 8001a9e:	f004 fa3d 	bl	8005f1c <HAL_TIM_ReadCapturedValue>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a6a      	ldr	r2, [pc, #424]	; (8001c50 <main+0x398>)
 8001aa6:	6013      	str	r3, [r2, #0]
				  dis1=echo1/58.0f;
 8001aa8:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <main+0x398>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ab4:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001c54 <main+0x39c>
 8001ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abc:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <main+0x3a0>)
 8001abe:	edc3 7a00 	vstr	s15, [r3]
		     }
			  HAL_Delay(1000);
 8001ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac6:	f001 f9b9 	bl	8002e3c <HAL_Delay>
	       HAL_Delay(1000);
 8001aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ace:	f001 f9b5 	bl	8002e3c <HAL_Delay>
			  if(rx_buffer[0]=='w')
 8001ad2:	4b52      	ldr	r3, [pc, #328]	; (8001c1c <main+0x364>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b77      	cmp	r3, #119	; 0x77
 8001ad8:	d101      	bne.n	8001ade <main+0x226>
			  {
			 	 Sistem_ON();
 8001ada:	f000 fe17 	bl	800270c <Sistem_ON>
			  }
			  if(rx_buffer[0]=='z')
 8001ade:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <main+0x364>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b7a      	cmp	r3, #122	; 0x7a
 8001ae4:	d101      	bne.n	8001aea <main+0x232>
			  {
				  Sistem_OFF();
 8001ae6:	f000 fe21 	bl	800272c <Sistem_OFF>
			  }
			  if(rx_buffer[0]=='a')//ldac
 8001aea:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <main+0x364>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b61      	cmp	r3, #97	; 0x61
 8001af0:	d114      	bne.n	8001b1c <main+0x264>
			  {
				   Fire_ON();
 8001af2:	f7ff fe21 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001af6:	f7ff fc49 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001afa:	f7ff fcd5 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001afe:	f7ff fd91 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001b02:	f7ff fdbb 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001b06:	f7ff fe77 	bl	80017f8 <Garaj_ON>
				   HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	4853      	ldr	r0, [pc, #332]	; (8001c5c <main+0x3a4>)
 8001b10:	f002 f81e 	bl	8003b50 <HAL_GPIO_WritePin>
				   HAL_Delay(1000);
 8001b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b18:	f001 f990 	bl	8002e3c <HAL_Delay>
			  }
			  if(rx_buffer[0]=='b')//leadkapa
 8001b1c:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <main+0x364>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b62      	cmp	r3, #98	; 0x62
 8001b22:	d114      	bne.n	8001b4e <main+0x296>
			 			  {
				   Fire_ON();
 8001b24:	f7ff fe08 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001b28:	f7ff fc30 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001b2c:	f7ff fcbc 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001b30:	f7ff fd78 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001b34:	f7ff fda2 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001b38:	f7ff fe5e 	bl	80017f8 <Garaj_ON>
				   HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4846      	ldr	r0, [pc, #280]	; (8001c5c <main+0x3a4>)
 8001b42:	f002 f805 	bl	8003b50 <HAL_GPIO_WritePin>
				   HAL_Delay(1000);
 8001b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b4a:	f001 f977 	bl	8002e3c <HAL_Delay>
			 			  }

			  if(rx_buffer[0]=='o')//motoracPENCERE
 8001b4e:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <main+0x364>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b6f      	cmp	r3, #111	; 0x6f
 8001b54:	d116      	bne.n	8001b84 <main+0x2cc>
			 	  {
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,1500);
 8001b56:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <main+0x33c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001b5e:	639a      	str	r2, [r3, #56]	; 0x38
							   HAL_Delay(200);
 8001b60:	20c8      	movs	r0, #200	; 0xc8
 8001b62:	f001 f96b 	bl	8002e3c <HAL_Delay>
							 //  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,500);
								HAL_Delay(200);
 8001b66:	20c8      	movs	r0, #200	; 0xc8
 8001b68:	f001 f968 	bl	8002e3c <HAL_Delay>
				   Fire_ON();
 8001b6c:	f7ff fde4 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001b70:	f7ff fc0c 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001b74:	f7ff fc98 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001b78:	f7ff fd54 	bl	8001624 <Hareket_OFF>
				  Gaz_ON();
 8001b7c:	f7ff fd7e 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001b80:	f7ff fe3a 	bl	80017f8 <Garaj_ON>

			 		  }
			  if(rx_buffer[0]=='c')//motorkapaPENCERE
 8001b84:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <main+0x364>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b63      	cmp	r3, #99	; 0x63
 8001b8a:	d116      	bne.n	8001bba <main+0x302>
			 			  {
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,500);
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <main+0x33c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
									HAL_Delay(200);
 8001b96:	20c8      	movs	r0, #200	; 0xc8
 8001b98:	f001 f950 	bl	8002e3c <HAL_Delay>
							//  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,1500);
									HAL_Delay(200);
 8001b9c:	20c8      	movs	r0, #200	; 0xc8
 8001b9e:	f001 f94d 	bl	8002e3c <HAL_Delay>
				   Fire_ON();
 8001ba2:	f7ff fdc9 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001ba6:	f7ff fbf1 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001baa:	f7ff fc7d 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001bae:	f7ff fd39 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001bb2:	f7ff fd63 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001bb6:	f7ff fe1f 	bl	80017f8 <Garaj_ON>

			 			  }
			  if(rx_buffer[0]=='d')//ldr ac
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <main+0x364>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d10b      	bne.n	8001bda <main+0x322>
			 			  {
				   Fire_ON();
 8001bc2:	f7ff fdb9 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001bc6:	f7ff fbe1 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001bca:	f7ff fc6d 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001bce:	f7ff fd29 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001bd2:	f7ff fd53 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001bd6:	f7ff fe0f 	bl	80017f8 <Garaj_ON>
			 			  }

			  if(rx_buffer[0]=='e')//ldrkapa
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <main+0x364>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	e03f      	b.n	8001c60 <main+0x3a8>
 8001be0:	3bcd35a8 	.word	0x3bcd35a8
 8001be4:	3f81d14e 	.word	0x3f81d14e
 8001be8:	2000044c 	.word	0x2000044c
 8001bec:	200000c0 	.word	0x200000c0
 8001bf0:	200003f8 	.word	0x200003f8
 8001bf4:	2000025c 	.word	0x2000025c
 8001bf8:	20000108 	.word	0x20000108
 8001bfc:	40014800 	.word	0x40014800
 8001c00:	20000220 	.word	0x20000220
 8001c04:	200000bc 	.word	0x200000bc
 8001c08:	20000494 	.word	0x20000494
 8001c0c:	200002de 	.word	0x200002de
 8001c10:	20000444 	.word	0x20000444
 8001c14:	20000448 	.word	0x20000448
 8001c18:	200001f4 	.word	0x200001f4
 8001c1c:	200002ac 	.word	0x200002ac
 8001c20:	20000518 	.word	0x20000518
 8001c24:	2000009c 	.word	0x2000009c
 8001c28:	200000a0 	.word	0x200000a0
 8001c2c:	2000009e 	.word	0x2000009e
 8001c30:	200000a2 	.word	0x200000a2
 8001c34:	2000009d 	.word	0x2000009d
 8001c38:	20000094 	.word	0x20000094
 8001c3c:	20000090 	.word	0x20000090
 8001c40:	200002a8 	.word	0x200002a8
 8001c44:	08007a44 	.word	0x08007a44
 8001c48:	20000498 	.word	0x20000498
 8001c4c:	2000055c 	.word	0x2000055c
 8001c50:	200000b8 	.word	0x200000b8
 8001c54:	42680000 	.word	0x42680000
 8001c58:	2000019c 	.word	0x2000019c
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	2b65      	cmp	r3, #101	; 0x65
 8001c62:	d10b      	bne.n	8001c7c <main+0x3c4>
			 			  {
				   Fire_ON();
 8001c64:	f7ff fd68 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001c68:	f7ff fb90 	bl	800138c <Deprem_ON>
				   Ldr_OFF();
 8001c6c:	f7ff fc54 	bl	8001518 <Ldr_OFF>
				   Hareket_OFF();
 8001c70:	f7ff fcd8 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001c74:	f7ff fd02 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001c78:	f7ff fdbe 	bl	80017f8 <Garaj_ON>
			 			  }
			  if(rx_buffer[0]=='f')//pırac
 8001c7c:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <main+0x5d0>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b66      	cmp	r3, #102	; 0x66
 8001c82:	d10b      	bne.n	8001c9c <main+0x3e4>
			 			  {
				   Fire_OFF();
 8001c84:	f7ff fda4 	bl	80017d0 <Fire_OFF>
				   Deprem_OFF();
 8001c88:	f7ff fbe0 	bl	800144c <Deprem_OFF>
				   Ldr_OFF();
 8001c8c:	f7ff fc44 	bl	8001518 <Ldr_OFF>
				   Hareket_ON();
 8001c90:	f7ff fc7e 	bl	8001590 <Hareket_ON>
				   Gaz_OFF();
 8001c94:	f7ff fd3c 	bl	8001710 <Gaz_OFF>
				   Garaj_OFF();
 8001c98:	f7ff fde4 	bl	8001864 <Garaj_OFF>
			 			  }
			  if(rx_buffer[0]=='g')//pırkapa
 8001c9c:	4b7a      	ldr	r3, [pc, #488]	; (8001e88 <main+0x5d0>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b67      	cmp	r3, #103	; 0x67
 8001ca2:	d10b      	bne.n	8001cbc <main+0x404>
			 			  {
				   Fire_OFF();
 8001ca4:	f7ff fd94 	bl	80017d0 <Fire_OFF>
				   Deprem_OFF();
 8001ca8:	f7ff fbd0 	bl	800144c <Deprem_OFF>
				   Ldr_OFF();
 8001cac:	f7ff fc34 	bl	8001518 <Ldr_OFF>
				   Hareket_OFF();
 8001cb0:	f7ff fcb8 	bl	8001624 <Hareket_OFF>
				   Gaz_OFF();
 8001cb4:	f7ff fd2c 	bl	8001710 <Gaz_OFF>
				   Garaj_OFF();
 8001cb8:	f7ff fdd4 	bl	8001864 <Garaj_OFF>
			 			  }
			  if(rx_buffer[0]=='h')//gazon
 8001cbc:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <main+0x5d0>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b68      	cmp	r3, #104	; 0x68
 8001cc2:	d10b      	bne.n	8001cdc <main+0x424>
			 	 		  {
				   Fire_ON();
 8001cc4:	f7ff fd38 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001cc8:	f7ff fb60 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001ccc:	f7ff fbec 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001cd0:	f7ff fca8 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001cd4:	f7ff fcd2 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001cd8:	f7ff fd8e 	bl	80017f8 <Garaj_ON>
			 			  }
			  if(rx_buffer[0]=='j')//gazof
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <main+0x5d0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b6a      	cmp	r3, #106	; 0x6a
 8001ce2:	d10b      	bne.n	8001cfc <main+0x444>
			 			  {
				   Fire_ON();
 8001ce4:	f7ff fd28 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001ce8:	f7ff fb50 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001cec:	f7ff fbdc 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001cf0:	f7ff fc98 	bl	8001624 <Hareket_OFF>
				   Gaz_OFF();
 8001cf4:	f7ff fd0c 	bl	8001710 <Gaz_OFF>
				   Garaj_ON();
 8001cf8:	f7ff fd7e 	bl	80017f8 <Garaj_ON>
			 			  }
			  if(rx_buffer[0]=='k')//yangınac
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <main+0x5d0>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b6b      	cmp	r3, #107	; 0x6b
 8001d02:	d10b      	bne.n	8001d1c <main+0x464>
						   {
				   Fire_ON();
 8001d04:	f7ff fd18 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001d08:	f7ff fb40 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001d0c:	f7ff fbcc 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001d10:	f7ff fc88 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001d14:	f7ff fcb2 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001d18:	f7ff fd6e 	bl	80017f8 <Garaj_ON>
						   }
			  if(rx_buffer[0]=='l')//yangın kapat
 8001d1c:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <main+0x5d0>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b6c      	cmp	r3, #108	; 0x6c
 8001d22:	d10b      	bne.n	8001d3c <main+0x484>
			 			  {
				   Fire_OFF();
 8001d24:	f7ff fd54 	bl	80017d0 <Fire_OFF>
				   Deprem_ON();
 8001d28:	f7ff fb30 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001d2c:	f7ff fbbc 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001d30:	f7ff fc78 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001d34:	f7ff fca2 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001d38:	f7ff fd5e 	bl	80017f8 <Garaj_ON>
			 			  }
			  if(rx_buffer[0]=='m')//depremac
 8001d3c:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <main+0x5d0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b6d      	cmp	r3, #109	; 0x6d
 8001d42:	d10b      	bne.n	8001d5c <main+0x4a4>
			 			  {
				   Fire_ON();
 8001d44:	f7ff fcf8 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001d48:	f7ff fb20 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001d4c:	f7ff fbac 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001d50:	f7ff fc68 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001d54:	f7ff fc92 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001d58:	f7ff fd4e 	bl	80017f8 <Garaj_ON>
			 			  }
			  if(rx_buffer[0]=='n')//depremkapa
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <main+0x5d0>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b6e      	cmp	r3, #110	; 0x6e
 8001d62:	d10b      	bne.n	8001d7c <main+0x4c4>
			 			  {
				   Fire_ON();
 8001d64:	f7ff fce8 	bl	8001738 <Fire_ON>
				   Deprem_OFF();
 8001d68:	f7ff fb70 	bl	800144c <Deprem_OFF>
				   Ldr_ON();
 8001d6c:	f7ff fb9c 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001d70:	f7ff fc58 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001d74:	f7ff fc82 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001d78:	f7ff fd3e 	bl	80017f8 <Garaj_ON>
			 			  }
			  if(rx_buffer[0]=='p')//garaj on
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <main+0x5d0>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b70      	cmp	r3, #112	; 0x70
 8001d82:	d10b      	bne.n	8001d9c <main+0x4e4>
			 			  {
				   Fire_ON();
 8001d84:	f7ff fcd8 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001d88:	f7ff fb00 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001d8c:	f7ff fb8c 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001d90:	f7ff fc48 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001d94:	f7ff fc72 	bl	800167c <Gaz_ON>
				   Garaj_ON();
 8001d98:	f7ff fd2e 	bl	80017f8 <Garaj_ON>
			 			  }
			  if(rx_buffer[0]=='r')//garakof
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <main+0x5d0>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b72      	cmp	r3, #114	; 0x72
 8001da2:	d10b      	bne.n	8001dbc <main+0x504>
			 			  {
				   Fire_ON();
 8001da4:	f7ff fcc8 	bl	8001738 <Fire_ON>
				   Deprem_ON();
 8001da8:	f7ff faf0 	bl	800138c <Deprem_ON>
				   Ldr_ON();
 8001dac:	f7ff fb7c 	bl	80014a8 <Ldr_ON>
				   Hareket_OFF();
 8001db0:	f7ff fc38 	bl	8001624 <Hareket_OFF>
				   Gaz_ON();
 8001db4:	f7ff fc62 	bl	800167c <Gaz_ON>
				   Garaj_OFF();
 8001db8:	f7ff fd54 	bl	8001864 <Garaj_OFF>
			 			  }
			  if(rx_buffer[0]=='s')//kapıac
 8001dbc:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <main+0x5d0>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b73      	cmp	r3, #115	; 0x73
 8001dc2:	d10f      	bne.n	8001de4 <main+0x52c>
			 			  {
				  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,1500);
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <main+0x5d4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
				 				   HAL_Delay(200);
 8001dce:	20c8      	movs	r0, #200	; 0xc8
 8001dd0:	f001 f834 	bl	8002e3c <HAL_Delay>
				 				  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,500);
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <main+0x5d4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38
				 				   HAL_Delay(200);
 8001dde:	20c8      	movs	r0, #200	; 0xc8
 8001de0:	f001 f82c 	bl	8002e3c <HAL_Delay>
				 //  Hareket_OFF();
				 //  Gaz_ON();
				 //  Garaj_ON();

			 			  }
			  if(rx_buffer[0]=='t')//kapıkapa
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <main+0x5d0>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b74      	cmp	r3, #116	; 0x74
 8001dea:	d10f      	bne.n	8001e0c <main+0x554>
			 			  {
				   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,500);
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <main+0x5d4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
							   HAL_Delay(200);
 8001df6:	20c8      	movs	r0, #200	; 0xc8
 8001df8:	f001 f820 	bl	8002e3c <HAL_Delay>
								   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,1500);
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <main+0x5d4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
							   HAL_Delay(200);
 8001e06:	20c8      	movs	r0, #200	; 0xc8
 8001e08:	f001 f818 	bl	8002e3c <HAL_Delay>
				//   Hareket_OFF();
				 //  Gaz_ON();
				 //  Garaj_ON();

			 			  }
			  if(rx_buffer[0]=='y')
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <main+0x5d0>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b79      	cmp	r3, #121	; 0x79
 8001e12:	d105      	bne.n	8001e20 <main+0x568>
			  {
				  Fire_ON();
 8001e14:	f7ff fc90 	bl	8001738 <Fire_ON>
				  Gaz_ON();
 8001e18:	f7ff fc30 	bl	800167c <Gaz_ON>
				  Hareket_ON();
 8001e1c:	f7ff fbb8 	bl	8001590 <Hareket_ON>
			  }
	                if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4))
 8001e20:	2110      	movs	r1, #16
 8001e22:	481b      	ldr	r0, [pc, #108]	; (8001e90 <main+0x5d8>)
 8001e24:	f001 fe7c 	bl	8003b20 <HAL_GPIO_ReadPin>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00f      	beq.n	8001e4e <main+0x596>
	             		{
	                     while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4))
 8001e2e:	e002      	b.n	8001e36 <main+0x57e>
	                       HAL_Delay(100);
 8001e30:	2064      	movs	r0, #100	; 0x64
 8001e32:	f001 f803 	bl	8002e3c <HAL_Delay>
	                     while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4))
 8001e36:	2110      	movs	r1, #16
 8001e38:	4815      	ldr	r0, [pc, #84]	; (8001e90 <main+0x5d8>)
 8001e3a:	f001 fe71 	bl	8003b20 <HAL_GPIO_ReadPin>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f5      	bne.n	8001e30 <main+0x578>
	                      count++;
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <main+0x5dc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <main+0x5dc>)
 8001e4c:	6013      	str	r3, [r2, #0]
	            		}
	                 if(count%2==1)
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <main+0x5dc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	bfb8      	it	lt
 8001e5a:	425b      	neglt	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <main+0x5b4>
	                  {
	                 	  	 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2120      	movs	r1, #32
 8001e64:	480a      	ldr	r0, [pc, #40]	; (8001e90 <main+0x5d8>)
 8001e66:	f001 fe73 	bl	8003b50 <HAL_GPIO_WritePin>
 8001e6a:	e568      	b.n	800193e <main+0x86>
	                   }
	                 else if(count%2==0)
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <main+0x5dc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f47f ad62 	bne.w	800193e <main+0x86>
	                 {
	                 	     HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <main+0x5d8>)
 8001e80:	f001 fe66 	bl	8003b50 <HAL_GPIO_WritePin>
	  Read_ADC();
 8001e84:	e55b      	b.n	800193e <main+0x86>
 8001e86:	bf00      	nop
 8001e88:	200002ac 	.word	0x200002ac
 8001e8c:	2000025c 	.word	0x2000025c
 8001e90:	40021000 	.word	0x40021000
 8001e94:	20000098 	.word	0x20000098

08001e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b094      	sub	sp, #80	; 0x50
 8001e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9e:	f107 0320 	add.w	r3, r7, #32
 8001ea2:	2230      	movs	r2, #48	; 0x30
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 f98a 	bl	80071c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <SystemClock_Config+0xcc>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <SystemClock_Config+0xcc>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <SystemClock_Config+0xcc>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <SystemClock_Config+0xd0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <SystemClock_Config+0xd0>)
 8001ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <SystemClock_Config+0xd0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001efc:	2310      	movs	r3, #16
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f00:	2302      	movs	r3, #2
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f0c:	23a8      	movs	r3, #168	; 0xa8
 8001f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f10:	2302      	movs	r3, #2
 8001f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f14:	2304      	movs	r3, #4
 8001f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f18:	f107 0320 	add.w	r3, r7, #32
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f002 ff0f 	bl	8004d40 <HAL_RCC_OscConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f28:	f000 fc10 	bl	800274c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f30:	2302      	movs	r3, #2
 8001f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2105      	movs	r1, #5
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 f970 	bl	8005230 <HAL_RCC_ClockConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f56:	f000 fbf9 	bl	800274c <Error_Handler>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3750      	adds	r7, #80	; 0x50
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000

08001f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f72:	463b      	mov	r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <MX_ADC1_Init+0x98>)
 8001f80:	4a21      	ldr	r2, [pc, #132]	; (8002008 <MX_ADC1_Init+0x9c>)
 8001f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <MX_ADC1_Init+0x98>)
 8001f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <MX_ADC1_Init+0x98>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <MX_ADC1_Init+0x98>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MX_ADC1_Init+0x98>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <MX_ADC1_Init+0x98>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <MX_ADC1_Init+0x98>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <MX_ADC1_Init+0x98>)
 8001fae:	4a17      	ldr	r2, [pc, #92]	; (800200c <MX_ADC1_Init+0xa0>)
 8001fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <MX_ADC1_Init+0x98>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <MX_ADC1_Init+0x98>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_ADC1_Init+0x98>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <MX_ADC1_Init+0x98>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <MX_ADC1_Init+0x98>)
 8001fce:	f000 ff59 	bl	8002e84 <HAL_ADC_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001fd8:	f000 fbb8 	bl	800274c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fe8:	463b      	mov	r3, r7
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_ADC1_Init+0x98>)
 8001fee:	f001 f8f7 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ff8:	f000 fba8 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200003a8 	.word	0x200003a8
 8002008:	40012000 	.word	0x40012000
 800200c:	0f000001 	.word	0x0f000001

08002010 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002016:	463b      	mov	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002022:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <MX_ADC2_Init+0x98>)
 8002024:	4a21      	ldr	r2, [pc, #132]	; (80020ac <MX_ADC2_Init+0x9c>)
 8002026:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <MX_ADC2_Init+0x98>)
 800202a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800202e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <MX_ADC2_Init+0x98>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <MX_ADC2_Init+0x98>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <MX_ADC2_Init+0x98>)
 800203e:	2200      	movs	r2, #0
 8002040:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <MX_ADC2_Init+0x98>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <MX_ADC2_Init+0x98>)
 800204c:	2200      	movs	r2, #0
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <MX_ADC2_Init+0x98>)
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <MX_ADC2_Init+0xa0>)
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <MX_ADC2_Init+0x98>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <MX_ADC2_Init+0x98>)
 800205e:	2201      	movs	r2, #1
 8002060:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_ADC2_Init+0x98>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MX_ADC2_Init+0x98>)
 800206c:	2201      	movs	r2, #1
 800206e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <MX_ADC2_Init+0x98>)
 8002072:	f000 ff07 	bl	8002e84 <HAL_ADC_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800207c:	f000 fb66 	bl	800274c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002080:	230c      	movs	r3, #12
 8002082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002084:	2301      	movs	r3, #1
 8002086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_ADC2_Init+0x98>)
 8002092:	f001 f8a5 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800209c:	f000 fb56 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000154 	.word	0x20000154
 80020ac:	40012100 	.word	0x40012100
 80020b0:	0f000001 	.word	0x0f000001

080020b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <MX_I2C1_Init+0x50>)
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <MX_I2C1_Init+0x54>)
 80020bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_I2C1_Init+0x50>)
 80020c0:	4a12      	ldr	r2, [pc, #72]	; (800210c <MX_I2C1_Init+0x58>)
 80020c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MX_I2C1_Init+0x50>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_I2C1_Init+0x50>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_I2C1_Init+0x50>)
 80020d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <MX_I2C1_Init+0x50>)
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_I2C1_Init+0x50>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <MX_I2C1_Init+0x50>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_I2C1_Init+0x50>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <MX_I2C1_Init+0x50>)
 80020f2:	f001 fd47 	bl	8003b84 <HAL_I2C_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020fc:	f000 fb26 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200001a0 	.word	0x200001a0
 8002108:	40005400 	.word	0x40005400
 800210c:	00061a80 	.word	0x00061a80

08002110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	615a      	str	r2, [r3, #20]
 8002130:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <MX_TIM3_Init+0xac>)
 8002134:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <MX_TIM3_Init+0xb0>)
 8002136:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <MX_TIM3_Init+0xac>)
 800213a:	2253      	movs	r2, #83	; 0x53
 800213c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <MX_TIM3_Init+0xac>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <MX_TIM3_Init+0xac>)
 8002146:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800214a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <MX_TIM3_Init+0xac>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <MX_TIM3_Init+0xac>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002158:	4818      	ldr	r0, [pc, #96]	; (80021bc <MX_TIM3_Init+0xac>)
 800215a:	f003 faf1 	bl	8005740 <HAL_TIM_PWM_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002164:	f000 faf2 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	4619      	mov	r1, r3
 8002176:	4811      	ldr	r0, [pc, #68]	; (80021bc <MX_TIM3_Init+0xac>)
 8002178:	f004 fbc4 	bl	8006904 <HAL_TIMEx_MasterConfigSynchronization>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002182:	f000 fae3 	bl	800274c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002186:	2360      	movs	r3, #96	; 0x60
 8002188:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2204      	movs	r2, #4
 800219a:	4619      	mov	r1, r3
 800219c:	4807      	ldr	r0, [pc, #28]	; (80021bc <MX_TIM3_Init+0xac>)
 800219e:	f003 fdb9 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021a8:	f000 fad0 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021ac:	4803      	ldr	r0, [pc, #12]	; (80021bc <MX_TIM3_Init+0xac>)
 80021ae:	f000 fc65 	bl	8002a7c <HAL_TIM_MspPostInit>

}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000025c 	.word	0x2000025c
 80021c0:	40000400 	.word	0x40000400

080021c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ca:	f107 0320 	add.w	r3, r7, #32
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
 80021e2:	615a      	str	r2, [r3, #20]
 80021e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021e6:	4b22      	ldr	r3, [pc, #136]	; (8002270 <MX_TIM4_Init+0xac>)
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <MX_TIM4_Init+0xb0>)
 80021ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80021ec:	4b20      	ldr	r3, [pc, #128]	; (8002270 <MX_TIM4_Init+0xac>)
 80021ee:	2253      	movs	r2, #83	; 0x53
 80021f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <MX_TIM4_Init+0xac>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <MX_TIM4_Init+0xac>)
 80021fa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80021fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <MX_TIM4_Init+0xac>)
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <MX_TIM4_Init+0xac>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800220c:	4818      	ldr	r0, [pc, #96]	; (8002270 <MX_TIM4_Init+0xac>)
 800220e:	f003 fa97 	bl	8005740 <HAL_TIM_PWM_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002218:	f000 fa98 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	4619      	mov	r1, r3
 800222a:	4811      	ldr	r0, [pc, #68]	; (8002270 <MX_TIM4_Init+0xac>)
 800222c:	f004 fb6a 	bl	8006904 <HAL_TIMEx_MasterConfigSynchronization>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002236:	f000 fa89 	bl	800274c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223a:	2360      	movs	r3, #96	; 0x60
 800223c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2208      	movs	r2, #8
 800224e:	4619      	mov	r1, r3
 8002250:	4807      	ldr	r0, [pc, #28]	; (8002270 <MX_TIM4_Init+0xac>)
 8002252:	f003 fd5f 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800225c:	f000 fa76 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <MX_TIM4_Init+0xac>)
 8002262:	f000 fc0b 	bl	8002a7c <HAL_TIM_MspPostInit>

}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000108 	.word	0x20000108
 8002274:	40000800 	.word	0x40000800

08002278 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227e:	463b      	mov	r3, r7
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_TIM6_Init+0x64>)
 8002288:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <MX_TIM6_Init+0x68>)
 800228a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MX_TIM6_Init+0x64>)
 800228e:	2253      	movs	r2, #83	; 0x53
 8002290:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_TIM6_Init+0x64>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MX_TIM6_Init+0x64>)
 800229a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800229e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_TIM6_Init+0x64>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022a6:	480d      	ldr	r0, [pc, #52]	; (80022dc <MX_TIM6_Init+0x64>)
 80022a8:	f003 f992 	bl	80055d0 <HAL_TIM_Base_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80022b2:	f000 fa4b 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022be:	463b      	mov	r3, r7
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <MX_TIM6_Init+0x64>)
 80022c4:	f004 fb1e 	bl	8006904 <HAL_TIMEx_MasterConfigSynchronization>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80022ce:	f000 fa3d 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000044c 	.word	0x2000044c
 80022e0:	40001000 	.word	0x40001000

080022e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	; 0x30
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002310:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <MX_TIM8_Init+0xec>)
 8002312:	4a30      	ldr	r2, [pc, #192]	; (80023d4 <MX_TIM8_Init+0xf0>)
 8002314:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002316:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <MX_TIM8_Init+0xec>)
 8002318:	2253      	movs	r2, #83	; 0x53
 800231a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231c:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <MX_TIM8_Init+0xec>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <MX_TIM8_Init+0xec>)
 8002324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002328:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232a:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <MX_TIM8_Init+0xec>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002330:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <MX_TIM8_Init+0xec>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <MX_TIM8_Init+0xec>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800233c:	4824      	ldr	r0, [pc, #144]	; (80023d0 <MX_TIM8_Init+0xec>)
 800233e:	f003 f947 	bl	80055d0 <HAL_TIM_Base_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8002348:	f000 fa00 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800234c:	4820      	ldr	r0, [pc, #128]	; (80023d0 <MX_TIM8_Init+0xec>)
 800234e:	f003 fb0f 	bl	8005970 <HAL_TIM_IC_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002358:	f000 f9f8 	bl	800274c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800235c:	2304      	movs	r3, #4
 800235e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002360:	2350      	movs	r3, #80	; 0x50
 8002362:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002364:	230a      	movs	r3, #10
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4619      	mov	r1, r3
 8002372:	4817      	ldr	r0, [pc, #92]	; (80023d0 <MX_TIM8_Init+0xec>)
 8002374:	f003 fd90 	bl	8005e98 <HAL_TIM_SlaveConfigSynchro>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800237e:	f000 f9e5 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	480f      	ldr	r0, [pc, #60]	; (80023d0 <MX_TIM8_Init+0xec>)
 8002392:	f004 fab7 	bl	8006904 <HAL_TIMEx_MasterConfigSynchronization>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 800239c:	f000 f9d6 	bl	800274c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80023a0:	230a      	movs	r3, #10
 80023a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023a4:	2301      	movs	r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	4619      	mov	r1, r3
 80023b6:	4806      	ldr	r0, [pc, #24]	; (80023d0 <MX_TIM8_Init+0xec>)
 80023b8:	f003 fc10 	bl	8005bdc <HAL_TIM_IC_ConfigChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 80023c2:	f000 f9c3 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	3730      	adds	r7, #48	; 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200000c0 	.word	0x200000c0
 80023d4:	40010400 	.word	0x40010400

080023d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	615a      	str	r2, [r3, #20]
 80023ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <MX_TIM11_Init+0x94>)
 80023f2:	4a1f      	ldr	r2, [pc, #124]	; (8002470 <MX_TIM11_Init+0x98>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 209;
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <MX_TIM11_Init+0x94>)
 80023f8:	22d1      	movs	r2, #209	; 0xd1
 80023fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <MX_TIM11_Init+0x94>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <MX_TIM11_Init+0x94>)
 8002404:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002408:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <MX_TIM11_Init+0x94>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <MX_TIM11_Init+0x94>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002416:	4815      	ldr	r0, [pc, #84]	; (800246c <MX_TIM11_Init+0x94>)
 8002418:	f003 f8da 	bl	80055d0 <HAL_TIM_Base_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002422:	f000 f993 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002426:	4811      	ldr	r0, [pc, #68]	; (800246c <MX_TIM11_Init+0x94>)
 8002428:	f003 f98a 	bl	8005740 <HAL_TIM_PWM_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002432:	f000 f98b 	bl	800274c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002436:	2360      	movs	r3, #96	; 0x60
 8002438:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	4807      	ldr	r0, [pc, #28]	; (800246c <MX_TIM11_Init+0x94>)
 800244e:	f003 fc61 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002458:	f000 f978 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <MX_TIM11_Init+0x94>)
 800245e:	f000 fb0d 	bl	8002a7c <HAL_TIM_MspPostInit>

}
 8002462:	bf00      	nop
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200003f8 	.word	0x200003f8
 8002470:	40014800 	.word	0x40014800

08002474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <MX_USART2_UART_Init+0x4c>)
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <MX_USART2_UART_Init+0x50>)
 800247c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <MX_USART2_UART_Init+0x4c>)
 8002480:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <MX_USART2_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <MX_USART2_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <MX_USART2_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MX_USART2_UART_Init+0x4c>)
 800249a:	220c      	movs	r2, #12
 800249c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <MX_USART2_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <MX_USART2_UART_Init+0x4c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_USART2_UART_Init+0x4c>)
 80024ac:	f004 faa6 	bl	80069fc <HAL_UART_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024b6:	f000 f949 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000518 	.word	0x20000518
 80024c4:	40004400 	.word	0x40004400

080024c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b4f      	ldr	r3, [pc, #316]	; (8002620 <MX_GPIO_Init+0x158>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a4e      	ldr	r2, [pc, #312]	; (8002620 <MX_GPIO_Init+0x158>)
 80024e8:	f043 0310 	orr.w	r3, r3, #16
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <MX_GPIO_Init+0x158>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b48      	ldr	r3, [pc, #288]	; (8002620 <MX_GPIO_Init+0x158>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a47      	ldr	r2, [pc, #284]	; (8002620 <MX_GPIO_Init+0x158>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b45      	ldr	r3, [pc, #276]	; (8002620 <MX_GPIO_Init+0x158>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <MX_GPIO_Init+0x158>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a40      	ldr	r2, [pc, #256]	; (8002620 <MX_GPIO_Init+0x158>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <MX_GPIO_Init+0x158>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <MX_GPIO_Init+0x158>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a39      	ldr	r2, [pc, #228]	; (8002620 <MX_GPIO_Init+0x158>)
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <MX_GPIO_Init+0x158>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <MX_GPIO_Init+0x158>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a32      	ldr	r2, [pc, #200]	; (8002620 <MX_GPIO_Init+0x158>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <MX_GPIO_Init+0x158>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002570:	482c      	ldr	r0, [pc, #176]	; (8002624 <MX_GPIO_Init+0x15c>)
 8002572:	f001 faed 	bl	8003b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	2110      	movs	r1, #16
 800257a:	482b      	ldr	r0, [pc, #172]	; (8002628 <MX_GPIO_Init+0x160>)
 800257c:	f001 fae8 	bl	8003b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002580:	2200      	movs	r2, #0
 8002582:	f24f 4102 	movw	r1, #62466	; 0xf402
 8002586:	4829      	ldr	r0, [pc, #164]	; (800262c <MX_GPIO_Init+0x164>)
 8002588:	f001 fae2 	bl	8003b50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800258c:	2310      	movs	r3, #16
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002594:	2302      	movs	r3, #2
 8002596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	4821      	ldr	r0, [pc, #132]	; (8002624 <MX_GPIO_Init+0x15c>)
 80025a0:	f001 f922 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 80025a4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80025a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	4819      	ldr	r0, [pc, #100]	; (8002624 <MX_GPIO_Init+0x15c>)
 80025be:	f001 f913 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025c2:	2310      	movs	r3, #16
 80025c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	4813      	ldr	r0, [pc, #76]	; (8002628 <MX_GPIO_Init+0x160>)
 80025da:	f001 f905 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80025de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	480c      	ldr	r0, [pc, #48]	; (8002624 <MX_GPIO_Init+0x15c>)
 80025f4:	f001 f8f8 	bl	80037e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD12 PD13 PD14
                           PD15 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80025f8:	f24f 4302 	movw	r3, #62466	; 0xf402
 80025fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	2301      	movs	r3, #1
 8002600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4806      	ldr	r0, [pc, #24]	; (800262c <MX_GPIO_Init+0x164>)
 8002612:	f001 f8e9 	bl	80037e8 <HAL_GPIO_Init>

}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40021000 	.word	0x40021000
 8002628:	40020000 	.word	0x40020000
 800262c:	40020c00 	.word	0x40020c00

08002630 <Scan_I2C_Address>:

/* USER CODE BEGIN 4 */
void Scan_I2C_Address()
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
	for(int i=0;i<=255;i++)
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	e00c      	b.n	8002656 <Scan_I2C_Address+0x26>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 10)==HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	b299      	uxth	r1, r3
 8002640:	230a      	movs	r3, #10
 8002642:	2201      	movs	r2, #1
 8002644:	4808      	ldr	r0, [pc, #32]	; (8002668 <Scan_I2C_Address+0x38>)
 8002646:	f001 ff05 	bl	8004454 <HAL_I2C_IsDeviceReady>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <Scan_I2C_Address+0x2e>
	for(int i=0;i<=255;i++)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3301      	adds	r3, #1
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2bff      	cmp	r3, #255	; 0xff
 800265a:	ddef      	ble.n	800263c <Scan_I2C_Address+0xc>
		break;
	}
}
 800265c:	e000      	b.n	8002660 <Scan_I2C_Address+0x30>
		break;
 800265e:	bf00      	nop
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200001a0 	.word	0x200001a0

0800266c <ADXL345_Write>:
void ADXL345_Write(uint8_t wRegister,uint8_t value)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af02      	add	r7, sp, #8
 8002672:	4603      	mov	r3, r0
 8002674:	460a      	mov	r2, r1
 8002676:	71fb      	strb	r3, [r7, #7]
 8002678:	4613      	mov	r3, r2
 800267a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {0};
 800267c:	2300      	movs	r3, #0
 800267e:	81bb      	strh	r3, [r7, #12]
	data[0]=wRegister;
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 8002684:	79bb      	ldrb	r3, [r7, #6]
 8002686:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, data, 2, 100);
 8002688:	f107 020c 	add.w	r2, r7, #12
 800268c:	2364      	movs	r3, #100	; 0x64
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2302      	movs	r3, #2
 8002692:	21a6      	movs	r1, #166	; 0xa6
 8002694:	4803      	ldr	r0, [pc, #12]	; (80026a4 <ADXL345_Write+0x38>)
 8002696:	f001 fbb9 	bl	8003e0c <HAL_I2C_Master_Transmit>
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200001a0 	.word	0x200001a0

080026a8 <ADXL345_Read>:
void ADXL345_Read(uint8_t rRegister,uint8_t numberOfBytes)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af04      	add	r7, sp, #16
 80026ae:	4603      	mov	r3, r0
 80026b0:	460a      	mov	r2, r1
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, rRegister, 1, myDatas, numberOfBytes, 100);
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	79bb      	ldrb	r3, [r7, #6]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2164      	movs	r1, #100	; 0x64
 80026c2:	9102      	str	r1, [sp, #8]
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <ADXL345_Read+0x34>)
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2301      	movs	r3, #1
 80026cc:	21a6      	movs	r1, #166	; 0xa6
 80026ce:	4804      	ldr	r0, [pc, #16]	; (80026e0 <ADXL345_Read+0x38>)
 80026d0:	f001 fc9a 	bl	8004008 <HAL_I2C_Mem_Read>
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000220 	.word	0x20000220
 80026e0:	200001a0 	.word	0x200001a0

080026e4 <ADX345_Init>:
void ADX345_Init()
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	ADXL345_Read(0x00, 1);//if the read data 0xe5 ,device is read
 80026e8:	2101      	movs	r1, #1
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7ff ffdc 	bl	80026a8 <ADXL345_Read>
	ADXL345_Write(0x2D, 0);//reset  powe controlls ALL bits
 80026f0:	2100      	movs	r1, #0
 80026f2:	202d      	movs	r0, #45	; 0x2d
 80026f4:	f7ff ffba 	bl	800266c <ADXL345_Write>
	//SetUp->
	ADXL345_Write(0x2D, 0x08);//measure bit1, wake up bit 0, autosleep 0,sleep 0,wake up frequence 8
 80026f8:	2108      	movs	r1, #8
 80026fa:	202d      	movs	r0, #45	; 0x2d
 80026fc:	f7ff ffb6 	bl	800266c <ADXL345_Write>
    ADXL345_Write(0x31, 0x01);//-+ 4g range
 8002700:	2101      	movs	r1, #1
 8002702:	2031      	movs	r0, #49	; 0x31
 8002704:	f7ff ffb2 	bl	800266c <ADXL345_Write>
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <Sistem_ON>:


void Sistem_ON()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
   Fire_ON();
 8002710:	f7ff f812 	bl	8001738 <Fire_ON>
   Deprem_ON();
 8002714:	f7fe fe3a 	bl	800138c <Deprem_ON>
   Ldr_ON();
 8002718:	f7fe fec6 	bl	80014a8 <Ldr_ON>
   Hareket_OFF();
 800271c:	f7fe ff82 	bl	8001624 <Hareket_OFF>
   Gaz_ON();
 8002720:	f7fe ffac 	bl	800167c <Gaz_ON>
   Garaj_ON();
 8002724:	f7ff f868 	bl	80017f8 <Garaj_ON>


}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <Sistem_OFF>:
void Sistem_OFF()
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	Gaz_OFF();
 8002730:	f7fe ffee 	bl	8001710 <Gaz_OFF>
	Hareket_OFF();
 8002734:	f7fe ff76 	bl	8001624 <Hareket_OFF>
	Ldr_OFF();
 8002738:	f7fe feee 	bl	8001518 <Ldr_OFF>
	Deprem_OFF();
 800273c:	f7fe fe86 	bl	800144c <Deprem_OFF>
	Fire_OFF();
 8002740:	f7ff f846 	bl	80017d0 <Fire_OFF>
	Garaj_OFF();
 8002744:	f7ff f88e 	bl	8001864 <Garaj_OFF>


}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002754:	e7fe      	b.n	8002754 <Error_Handler+0x8>
	...

08002758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_MspInit+0x4c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_MspInit+0x4c>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_MspInit+0x4c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_MspInit+0x4c>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_MspInit+0x4c>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_MspInit+0x4c>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08c      	sub	sp, #48	; 0x30
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2e      	ldr	r2, [pc, #184]	; (8002880 <HAL_ADC_MspInit+0xd8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d128      	bne.n	800281c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002802:	2301      	movs	r3, #1
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 031c 	add.w	r3, r7, #28
 8002812:	4619      	mov	r1, r3
 8002814:	481c      	ldr	r0, [pc, #112]	; (8002888 <HAL_ADC_MspInit+0xe0>)
 8002816:	f000 ffe7 	bl	80037e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800281a:	e02c      	b.n	8002876 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HAL_ADC_MspInit+0xe4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d127      	bne.n	8002876 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 8002830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b13      	ldr	r3, [pc, #76]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_ADC_MspInit+0xdc>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800285e:	2304      	movs	r3, #4
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002862:	2303      	movs	r3, #3
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4619      	mov	r1, r3
 8002870:	4807      	ldr	r0, [pc, #28]	; (8002890 <HAL_ADC_MspInit+0xe8>)
 8002872:	f000 ffb9 	bl	80037e8 <HAL_GPIO_Init>
}
 8002876:	bf00      	nop
 8002878:	3730      	adds	r7, #48	; 0x30
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40012000 	.word	0x40012000
 8002884:	40023800 	.word	0x40023800
 8002888:	40020000 	.word	0x40020000
 800288c:	40012100 	.word	0x40012100
 8002890:	40020800 	.word	0x40020800

08002894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_I2C_MspInit+0x84>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d12b      	bne.n	800290e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_I2C_MspInit+0x88>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a17      	ldr	r2, [pc, #92]	; (800291c <HAL_I2C_MspInit+0x88>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_I2C_MspInit+0x88>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028d2:	23c0      	movs	r3, #192	; 0xc0
 80028d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d6:	2312      	movs	r3, #18
 80028d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028da:	2301      	movs	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028de:	2303      	movs	r3, #3
 80028e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028e2:	2304      	movs	r3, #4
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4619      	mov	r1, r3
 80028ec:	480c      	ldr	r0, [pc, #48]	; (8002920 <HAL_I2C_MspInit+0x8c>)
 80028ee:	f000 ff7b 	bl	80037e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_I2C_MspInit+0x88>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_I2C_MspInit+0x88>)
 80028fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_I2C_MspInit+0x88>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800290e:	bf00      	nop
 8002910:	3728      	adds	r7, #40	; 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40005400 	.word	0x40005400
 800291c:	40023800 	.word	0x40023800
 8002920:	40020400 	.word	0x40020400

08002924 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a15      	ldr	r2, [pc, #84]	; (8002988 <HAL_TIM_PWM_MspInit+0x64>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <HAL_TIM_PWM_MspInit+0x68>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a13      	ldr	r2, [pc, #76]	; (800298c <HAL_TIM_PWM_MspInit+0x68>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_TIM_PWM_MspInit+0x68>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002952:	e012      	b.n	800297a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <HAL_TIM_PWM_MspInit+0x6c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10d      	bne.n	800297a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_TIM_PWM_MspInit+0x68>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_TIM_PWM_MspInit+0x68>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_TIM_PWM_MspInit+0x68>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40000400 	.word	0x40000400
 800298c:	40023800 	.word	0x40023800
 8002990:	40000800 	.word	0x40000800

08002994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM6)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2d      	ldr	r2, [pc, #180]	; (8002a68 <HAL_TIM_Base_MspInit+0xd4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10e      	bne.n	80029d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 80029c0:	f043 0310 	orr.w	r3, r3, #16
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80029d2:	e044      	b.n	8002a5e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <HAL_TIM_Base_MspInit+0xdc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d12c      	bne.n	8002a38 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a21      	ldr	r2, [pc, #132]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a16:	2340      	movs	r3, #64	; 0x40
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a26:	2303      	movs	r3, #3
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <HAL_TIM_Base_MspInit+0xe0>)
 8002a32:	f000 fed9 	bl	80037e8 <HAL_GPIO_Init>
}
 8002a36:	e012      	b.n	8002a5e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM11)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0e      	ldr	r2, [pc, #56]	; (8002a78 <HAL_TIM_Base_MspInit+0xe4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	6453      	str	r3, [r2, #68]	; 0x44
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_TIM_Base_MspInit+0xd8>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
}
 8002a5e:	bf00      	nop
 8002a60:	3730      	adds	r7, #48	; 0x30
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40001000 	.word	0x40001000
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40010400 	.word	0x40010400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40014800 	.word	0x40014800

08002a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a37      	ldr	r2, [pc, #220]	; (8002b78 <HAL_TIM_MspPostInit+0xfc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d11e      	bne.n	8002adc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_TIM_MspPostInit+0x100>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a35      	ldr	r2, [pc, #212]	; (8002b7c <HAL_TIM_MspPostInit+0x100>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_TIM_MspPostInit+0x100>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aca:	2302      	movs	r3, #2
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	482a      	ldr	r0, [pc, #168]	; (8002b80 <HAL_TIM_MspPostInit+0x104>)
 8002ad6:	f000 fe87 	bl	80037e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002ada:	e048      	b.n	8002b6e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <HAL_TIM_MspPostInit+0x108>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d11f      	bne.n	8002b26 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_TIM_MspPostInit+0x100>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <HAL_TIM_MspPostInit+0x100>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_TIM_MspPostInit+0x100>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b14:	2302      	movs	r3, #2
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	481a      	ldr	r0, [pc, #104]	; (8002b88 <HAL_TIM_MspPostInit+0x10c>)
 8002b20:	f000 fe62 	bl	80037e8 <HAL_GPIO_Init>
}
 8002b24:	e023      	b.n	8002b6e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM11)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a18      	ldr	r2, [pc, #96]	; (8002b8c <HAL_TIM_MspPostInit+0x110>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d11e      	bne.n	8002b6e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_TIM_MspPostInit+0x100>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_TIM_MspPostInit+0x100>)
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <HAL_TIM_MspPostInit+0x100>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4807      	ldr	r0, [pc, #28]	; (8002b88 <HAL_TIM_MspPostInit+0x10c>)
 8002b6a:	f000 fe3d 	bl	80037e8 <HAL_GPIO_Init>
}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40000800 	.word	0x40000800
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40014800 	.word	0x40014800

08002b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a19      	ldr	r2, [pc, #100]	; (8002c14 <HAL_UART_MspInit+0x84>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d12b      	bne.n	8002c0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_UART_MspInit+0x88>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_UART_MspInit+0x88>)
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_UART_MspInit+0x88>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_UART_MspInit+0x88>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a10      	ldr	r2, [pc, #64]	; (8002c18 <HAL_UART_MspInit+0x88>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_UART_MspInit+0x88>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bea:	230c      	movs	r3, #12
 8002bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4619      	mov	r1, r3
 8002c04:	4805      	ldr	r0, [pc, #20]	; (8002c1c <HAL_UART_MspInit+0x8c>)
 8002c06:	f000 fdef 	bl	80037e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c0a:	bf00      	nop
 8002c0c:	3728      	adds	r7, #40	; 0x28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40004400 	.word	0x40004400
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020000 	.word	0x40020000

08002c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <NMI_Handler+0x4>

08002c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <HardFault_Handler+0x4>

08002c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <MemManage_Handler+0x4>

08002c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c36:	e7fe      	b.n	8002c36 <BusFault_Handler+0x4>

08002c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <UsageFault_Handler+0x4>

08002c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6c:	f000 f8c6 	bl	8002dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c7c:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <_sbrk+0x5c>)
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <_sbrk+0x60>)
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <_sbrk+0x64>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <_sbrk+0x64>)
 8002c92:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <_sbrk+0x68>)
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <_sbrk+0x64>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d207      	bcs.n	8002cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca4:	f004 fa62 	bl	800716c <__errno>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	220c      	movs	r2, #12
 8002cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	e009      	b.n	8002cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <_sbrk+0x64>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <_sbrk+0x64>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <_sbrk+0x64>)
 8002cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20020000 	.word	0x20020000
 8002cd4:	00000400 	.word	0x00000400
 8002cd8:	200000ac 	.word	0x200000ac
 8002cdc:	20000578 	.word	0x20000578

08002ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <SystemInit+0x20>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <SystemInit+0x20>)
 8002cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d08:	480d      	ldr	r0, [pc, #52]	; (8002d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d0a:	490e      	ldr	r1, [pc, #56]	; (8002d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d10:	e002      	b.n	8002d18 <LoopCopyDataInit>

08002d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d16:	3304      	adds	r3, #4

08002d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d1c:	d3f9      	bcc.n	8002d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d20:	4c0b      	ldr	r4, [pc, #44]	; (8002d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d24:	e001      	b.n	8002d2a <LoopFillZerobss>

08002d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d28:	3204      	adds	r2, #4

08002d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d2c:	d3fb      	bcc.n	8002d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d2e:	f7ff ffd7 	bl	8002ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d32:	f004 fa21 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d36:	f7fe fdbf 	bl	80018b8 <main>
  bx  lr    
 8002d3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002d48:	08007ac4 	.word	0x08007ac4
  ldr r2, =_sbss
 8002d4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002d50:	20000574 	.word	0x20000574

08002d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <ADC_IRQHandler>
	...

08002d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_Init+0x40>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <HAL_Init+0x40>)
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_Init+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <HAL_Init+0x40>)
 8002d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <HAL_Init+0x40>)
 8002d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 fcfd 	bl	8003780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 f808 	bl	8002d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8c:	f7ff fce4 	bl	8002758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023c00 	.word	0x40023c00

08002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_InitTick+0x54>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_InitTick+0x58>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fd07 	bl	80037ce <HAL_SYSTICK_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00e      	b.n	8002de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d80a      	bhi.n	8002de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f000 fcdd 	bl	8003796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ddc:	4a06      	ldr	r2, [pc, #24]	; (8002df8 <HAL_InitTick+0x5c>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000004 	.word	0x20000004
 8002df4:	2000000c 	.word	0x2000000c
 8002df8:	20000008 	.word	0x20000008

08002dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_IncTick+0x20>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_IncTick+0x24>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <HAL_IncTick+0x24>)
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	2000000c 	.word	0x2000000c
 8002e20:	20000560 	.word	0x20000560

08002e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return uwTick;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_GetTick+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000560 	.word	0x20000560

08002e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff ffee 	bl	8002e24 <HAL_GetTick>
 8002e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d005      	beq.n	8002e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_Delay+0x44>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e62:	bf00      	nop
 8002e64:	f7ff ffde 	bl	8002e24 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d8f7      	bhi.n	8002e64 <HAL_Delay+0x28>
  {
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2000000c 	.word	0x2000000c

08002e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e033      	b.n	8002f02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff fc80 	bl	80027a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002eca:	f023 0302 	bic.w	r3, r3, #2
 8002ece:	f043 0202 	orr.w	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 faa4 	bl	8003424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ef2:	e001      	b.n	8002ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Start+0x1a>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0b2      	b.n	800308c <HAL_ADC_Start+0x180>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d018      	beq.n	8002f6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4c:	4b52      	ldr	r3, [pc, #328]	; (8003098 <HAL_ADC_Start+0x18c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_ADC_Start+0x190>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9a      	lsrs	r2, r3, #18
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f60:	e002      	b.n	8002f68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f9      	bne.n	8002f62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d17a      	bne.n	8003072 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fba:	d106      	bne.n	8002fca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f023 0206 	bic.w	r2, r3, #6
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
 8002fc8:	e002      	b.n	8002fd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd8:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <HAL_ADC_Start+0x194>)
 8002fda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d12a      	bne.n	8003048 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <HAL_ADC_Start+0x198>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d015      	beq.n	8003028 <HAL_ADC_Start+0x11c>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a29      	ldr	r2, [pc, #164]	; (80030a8 <HAL_ADC_Start+0x19c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d105      	bne.n	8003012 <HAL_ADC_Start+0x106>
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <HAL_ADC_Start+0x194>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a25      	ldr	r2, [pc, #148]	; (80030ac <HAL_ADC_Start+0x1a0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d136      	bne.n	800308a <HAL_ADC_Start+0x17e>
 800301c:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_ADC_Start+0x194>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d130      	bne.n	800308a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d129      	bne.n	800308a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	e020      	b.n	800308a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <HAL_ADC_Start+0x198>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d11b      	bne.n	800308a <HAL_ADC_Start+0x17e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d114      	bne.n	800308a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e00b      	b.n	800308a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0210 	orr.w	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	20000004 	.word	0x20000004
 800309c:	431bde83 	.word	0x431bde83
 80030a0:	40012300 	.word	0x40012300
 80030a4:	40012000 	.word	0x40012000
 80030a8:	40012100 	.word	0x40012100
 80030ac:	40012200 	.word	0x40012200

080030b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030cc:	d113      	bne.n	80030f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030dc:	d10b      	bne.n	80030f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e063      	b.n	80031be <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80030f6:	f7ff fe95 	bl	8002e24 <HAL_GetTick>
 80030fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030fc:	e021      	b.n	8003142 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d01d      	beq.n	8003142 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_ADC_PollForConversion+0x6c>
 800310c:	f7ff fe8a 	bl	8002e24 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d212      	bcs.n	8003142 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d00b      	beq.n	8003142 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0204 	orr.w	r2, r3, #4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e03d      	b.n	80031be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b02      	cmp	r3, #2
 800314e:	d1d6      	bne.n	80030fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0212 	mvn.w	r2, #18
 8003158:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d123      	bne.n	80031bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11f      	bne.n	80031bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003194:	2b00      	cmp	r3, #0
 8003196:	d111      	bne.n	80031bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1c>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e105      	b.n	8003408 <HAL_ADC_ConfigChannel+0x228>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b09      	cmp	r3, #9
 800320a:	d925      	bls.n	8003258 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68d9      	ldr	r1, [r3, #12]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	3b1e      	subs	r3, #30
 8003222:	2207      	movs	r2, #7
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43da      	mvns	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	400a      	ands	r2, r1
 8003230:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68d9      	ldr	r1, [r3, #12]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	4618      	mov	r0, r3
 8003244:	4603      	mov	r3, r0
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4403      	add	r3, r0
 800324a:	3b1e      	subs	r3, #30
 800324c:	409a      	lsls	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	e022      	b.n	800329e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	2207      	movs	r2, #7
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	400a      	ands	r2, r1
 800327a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6919      	ldr	r1, [r3, #16]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	4618      	mov	r0, r3
 800328e:	4603      	mov	r3, r0
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4403      	add	r3, r0
 8003294:	409a      	lsls	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d824      	bhi.n	80032f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b05      	subs	r3, #5
 80032b8:	221f      	movs	r2, #31
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	3b05      	subs	r3, #5
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
 80032ee:	e04c      	b.n	800338a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d824      	bhi.n	8003342 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	3b23      	subs	r3, #35	; 0x23
 800330a:	221f      	movs	r2, #31
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43da      	mvns	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	400a      	ands	r2, r1
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	4618      	mov	r0, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	3b23      	subs	r3, #35	; 0x23
 8003334:	fa00 f203 	lsl.w	r2, r0, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
 8003340:	e023      	b.n	800338a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	3b41      	subs	r3, #65	; 0x41
 8003354:	221f      	movs	r2, #31
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	400a      	ands	r2, r1
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	4618      	mov	r0, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	3b41      	subs	r3, #65	; 0x41
 800337e:	fa00 f203 	lsl.w	r2, r0, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_ADC_ConfigChannel+0x234>)
 800338c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a21      	ldr	r2, [pc, #132]	; (8003418 <HAL_ADC_ConfigChannel+0x238>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d109      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1cc>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b12      	cmp	r3, #18
 800339e:	d105      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_ADC_ConfigChannel+0x238>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d123      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d003      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x1e6>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b11      	cmp	r3, #17
 80033c4:	d11b      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d111      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_ADC_ConfigChannel+0x23c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <HAL_ADC_ConfigChannel+0x240>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	0c9a      	lsrs	r2, r3, #18
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f0:	e002      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f9      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40012300 	.word	0x40012300
 8003418:	40012000 	.word	0x40012000
 800341c:	20000004 	.word	0x20000004
 8003420:	431bde83 	.word	0x431bde83

08003424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800342c:	4b79      	ldr	r3, [pc, #484]	; (8003614 <ADC_Init+0x1f0>)
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800347c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	4a58      	ldr	r2, [pc, #352]	; (8003618 <ADC_Init+0x1f4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6899      	ldr	r1, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	e00f      	b.n	8003522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0202 	bic.w	r2, r2, #2
 8003530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7e1b      	ldrb	r3, [r3, #24]
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01b      	beq.n	8003588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800356e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	3b01      	subs	r3, #1
 800357c:	035a      	lsls	r2, r3, #13
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e007      	b.n	8003598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	051a      	lsls	r2, r3, #20
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6899      	ldr	r1, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035da:	025a      	lsls	r2, r3, #9
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	029a      	lsls	r2, r3, #10
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40012300 	.word	0x40012300
 8003618:	0f000001 	.word	0x0f000001

0800361c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <__NVIC_SetPriorityGrouping+0x44>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003638:	4013      	ands	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800364e:	4a04      	ldr	r2, [pc, #16]	; (8003660 <__NVIC_SetPriorityGrouping+0x44>)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	60d3      	str	r3, [r2, #12]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <__NVIC_GetPriorityGrouping+0x18>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	f003 0307 	and.w	r3, r3, #7
}
 8003672:	4618      	mov	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	db0a      	blt.n	80036aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	490c      	ldr	r1, [pc, #48]	; (80036cc <__NVIC_SetPriority+0x4c>)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	440b      	add	r3, r1
 80036a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a8:	e00a      	b.n	80036c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4908      	ldr	r1, [pc, #32]	; (80036d0 <__NVIC_SetPriority+0x50>)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3b04      	subs	r3, #4
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	440b      	add	r3, r1
 80036be:	761a      	strb	r2, [r3, #24]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000e100 	.word	0xe000e100
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f1c3 0307 	rsb	r3, r3, #7
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	bf28      	it	cs
 80036f2:	2304      	movcs	r3, #4
 80036f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d902      	bls.n	8003704 <NVIC_EncodePriority+0x30>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3b03      	subs	r3, #3
 8003702:	e000      	b.n	8003706 <NVIC_EncodePriority+0x32>
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	401a      	ands	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800371c:	f04f 31ff 	mov.w	r1, #4294967295
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43d9      	mvns	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	4313      	orrs	r3, r2
         );
}
 800372e:	4618      	mov	r0, r3
 8003730:	3724      	adds	r7, #36	; 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800374c:	d301      	bcc.n	8003752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800374e:	2301      	movs	r3, #1
 8003750:	e00f      	b.n	8003772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <SysTick_Config+0x40>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3b01      	subs	r3, #1
 8003758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800375a:	210f      	movs	r1, #15
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
 8003760:	f7ff ff8e 	bl	8003680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <SysTick_Config+0x40>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376a:	4b04      	ldr	r3, [pc, #16]	; (800377c <SysTick_Config+0x40>)
 800376c:	2207      	movs	r2, #7
 800376e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	e000e010 	.word	0xe000e010

08003780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ff47 	bl	800361c <__NVIC_SetPriorityGrouping>
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003796:	b580      	push	{r7, lr}
 8003798:	b086      	sub	sp, #24
 800379a:	af00      	add	r7, sp, #0
 800379c:	4603      	mov	r3, r0
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a8:	f7ff ff5c 	bl	8003664 <__NVIC_GetPriorityGrouping>
 80037ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	6978      	ldr	r0, [r7, #20]
 80037b4:	f7ff ff8e 	bl	80036d4 <NVIC_EncodePriority>
 80037b8:	4602      	mov	r2, r0
 80037ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff5d 	bl	8003680 <__NVIC_SetPriority>
}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffb0 	bl	800373c <SysTick_Config>
 80037dc:	4603      	mov	r3, r0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e16b      	b.n	8003adc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003804:	2201      	movs	r2, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	429a      	cmp	r2, r3
 800381e:	f040 815a 	bne.w	8003ad6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d005      	beq.n	800383a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003836:	2b02      	cmp	r3, #2
 8003838:	d130      	bne.n	800389c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	2203      	movs	r2, #3
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003870:	2201      	movs	r2, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 0201 	and.w	r2, r3, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d017      	beq.n	80038d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d123      	bne.n	800392c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	08da      	lsrs	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3208      	adds	r2, #8
 80038ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	220f      	movs	r2, #15
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	08da      	lsrs	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3208      	adds	r2, #8
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80b4 	beq.w	8003ad6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b60      	ldr	r3, [pc, #384]	; (8003af4 <HAL_GPIO_Init+0x30c>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	4a5f      	ldr	r2, [pc, #380]	; (8003af4 <HAL_GPIO_Init+0x30c>)
 8003978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800397c:	6453      	str	r3, [r2, #68]	; 0x44
 800397e:	4b5d      	ldr	r3, [pc, #372]	; (8003af4 <HAL_GPIO_Init+0x30c>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800398a:	4a5b      	ldr	r2, [pc, #364]	; (8003af8 <HAL_GPIO_Init+0x310>)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a52      	ldr	r2, [pc, #328]	; (8003afc <HAL_GPIO_Init+0x314>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d02b      	beq.n	8003a0e <HAL_GPIO_Init+0x226>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a51      	ldr	r2, [pc, #324]	; (8003b00 <HAL_GPIO_Init+0x318>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d025      	beq.n	8003a0a <HAL_GPIO_Init+0x222>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a50      	ldr	r2, [pc, #320]	; (8003b04 <HAL_GPIO_Init+0x31c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01f      	beq.n	8003a06 <HAL_GPIO_Init+0x21e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4f      	ldr	r2, [pc, #316]	; (8003b08 <HAL_GPIO_Init+0x320>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d019      	beq.n	8003a02 <HAL_GPIO_Init+0x21a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4e      	ldr	r2, [pc, #312]	; (8003b0c <HAL_GPIO_Init+0x324>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_GPIO_Init+0x216>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4d      	ldr	r2, [pc, #308]	; (8003b10 <HAL_GPIO_Init+0x328>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00d      	beq.n	80039fa <HAL_GPIO_Init+0x212>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4c      	ldr	r2, [pc, #304]	; (8003b14 <HAL_GPIO_Init+0x32c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <HAL_GPIO_Init+0x20e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4b      	ldr	r2, [pc, #300]	; (8003b18 <HAL_GPIO_Init+0x330>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_GPIO_Init+0x20a>
 80039ee:	2307      	movs	r3, #7
 80039f0:	e00e      	b.n	8003a10 <HAL_GPIO_Init+0x228>
 80039f2:	2308      	movs	r3, #8
 80039f4:	e00c      	b.n	8003a10 <HAL_GPIO_Init+0x228>
 80039f6:	2306      	movs	r3, #6
 80039f8:	e00a      	b.n	8003a10 <HAL_GPIO_Init+0x228>
 80039fa:	2305      	movs	r3, #5
 80039fc:	e008      	b.n	8003a10 <HAL_GPIO_Init+0x228>
 80039fe:	2304      	movs	r3, #4
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_Init+0x228>
 8003a02:	2303      	movs	r3, #3
 8003a04:	e004      	b.n	8003a10 <HAL_GPIO_Init+0x228>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_Init+0x228>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_GPIO_Init+0x228>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	f002 0203 	and.w	r2, r2, #3
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	4093      	lsls	r3, r2
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a20:	4935      	ldr	r1, [pc, #212]	; (8003af8 <HAL_GPIO_Init+0x310>)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_GPIO_Init+0x334>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a52:	4a32      	ldr	r2, [pc, #200]	; (8003b1c <HAL_GPIO_Init+0x334>)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a58:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <HAL_GPIO_Init+0x334>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <HAL_GPIO_Init+0x334>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a82:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <HAL_GPIO_Init+0x334>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa6:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_GPIO_Init+0x334>)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_GPIO_Init+0x334>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad0:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <HAL_GPIO_Init+0x334>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	f67f ae90 	bls.w	8003804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3724      	adds	r7, #36	; 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40013800 	.word	0x40013800
 8003afc:	40020000 	.word	0x40020000
 8003b00:	40020400 	.word	0x40020400
 8003b04:	40020800 	.word	0x40020800
 8003b08:	40020c00 	.word	0x40020c00
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40021400 	.word	0x40021400
 8003b14:	40021800 	.word	0x40021800
 8003b18:	40021c00 	.word	0x40021c00
 8003b1c:	40013c00 	.word	0x40013c00

08003b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	887b      	ldrh	r3, [r7, #2]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	e001      	b.n	8003b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	807b      	strh	r3, [r7, #2]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b60:	787b      	ldrb	r3, [r7, #1]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b6c:	e003      	b.n	8003b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b6e:	887b      	ldrh	r3, [r7, #2]
 8003b70:	041a      	lsls	r2, r3, #16
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	619a      	str	r2, [r3, #24]
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e12b      	b.n	8003dee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fe fe72 	bl	8002894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003be8:	f001 fcca 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 8003bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4a81      	ldr	r2, [pc, #516]	; (8003df8 <HAL_I2C_Init+0x274>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d807      	bhi.n	8003c08 <HAL_I2C_Init+0x84>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a80      	ldr	r2, [pc, #512]	; (8003dfc <HAL_I2C_Init+0x278>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	bf94      	ite	ls
 8003c00:	2301      	movls	r3, #1
 8003c02:	2300      	movhi	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e006      	b.n	8003c16 <HAL_I2C_Init+0x92>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a7d      	ldr	r2, [pc, #500]	; (8003e00 <HAL_I2C_Init+0x27c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bf94      	ite	ls
 8003c10:	2301      	movls	r3, #1
 8003c12:	2300      	movhi	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0e7      	b.n	8003dee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a78      	ldr	r2, [pc, #480]	; (8003e04 <HAL_I2C_Init+0x280>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a6a      	ldr	r2, [pc, #424]	; (8003df8 <HAL_I2C_Init+0x274>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d802      	bhi.n	8003c58 <HAL_I2C_Init+0xd4>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3301      	adds	r3, #1
 8003c56:	e009      	b.n	8003c6c <HAL_I2C_Init+0xe8>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	4a69      	ldr	r2, [pc, #420]	; (8003e08 <HAL_I2C_Init+0x284>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	495c      	ldr	r1, [pc, #368]	; (8003df8 <HAL_I2C_Init+0x274>)
 8003c88:	428b      	cmp	r3, r1
 8003c8a:	d819      	bhi.n	8003cc0 <HAL_I2C_Init+0x13c>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e59      	subs	r1, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9a:	1c59      	adds	r1, r3, #1
 8003c9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ca0:	400b      	ands	r3, r1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_I2C_Init+0x138>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1e59      	subs	r1, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cba:	e051      	b.n	8003d60 <HAL_I2C_Init+0x1dc>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	e04f      	b.n	8003d60 <HAL_I2C_Init+0x1dc>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d111      	bne.n	8003cec <HAL_I2C_Init+0x168>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1e58      	subs	r0, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	440b      	add	r3, r1
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e012      	b.n	8003d12 <HAL_I2C_Init+0x18e>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e58      	subs	r0, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	0099      	lsls	r1, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Init+0x196>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e022      	b.n	8003d60 <HAL_I2C_Init+0x1dc>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10e      	bne.n	8003d40 <HAL_I2C_Init+0x1bc>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1e58      	subs	r0, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	440b      	add	r3, r1
 8003d30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3e:	e00f      	b.n	8003d60 <HAL_I2C_Init+0x1dc>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e58      	subs	r0, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	0099      	lsls	r1, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	6809      	ldr	r1, [r1, #0]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6911      	ldr	r1, [r2, #16]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68d2      	ldr	r2, [r2, #12]
 8003d9a:	4311      	orrs	r1, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	000186a0 	.word	0x000186a0
 8003dfc:	001e847f 	.word	0x001e847f
 8003e00:	003d08ff 	.word	0x003d08ff
 8003e04:	431bde83 	.word	0x431bde83
 8003e08:	10624dd3 	.word	0x10624dd3

08003e0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	460b      	mov	r3, r1
 8003e1a:	817b      	strh	r3, [r7, #10]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e20:	f7ff f800 	bl	8002e24 <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	f040 80e0 	bne.w	8003ff4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	2319      	movs	r3, #25
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4970      	ldr	r1, [pc, #448]	; (8004000 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fda0 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e0d3      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_I2C_Master_Transmit+0x50>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d007      	beq.n	8003e82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2221      	movs	r2, #33	; 0x21
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	893a      	ldrh	r2, [r7, #8]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a50      	ldr	r2, [pc, #320]	; (8004004 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ec4:	8979      	ldrh	r1, [r7, #10]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fbf0 	bl	80046b0 <I2C_MasterRequestWrite>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e08d      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ef0:	e066      	b.n	8003fc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	6a39      	ldr	r1, [r7, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fe1a 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06b      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d11b      	bne.n	8003f94 <HAL_I2C_Master_Transmit+0x188>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d017      	beq.n	8003f94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	6a39      	ldr	r1, [r7, #32]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fe0a 	bl	8004bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d107      	bne.n	8003fbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e01a      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d194      	bne.n	8003ef2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	00100002 	.word	0x00100002
 8004004:	ffff0000 	.word	0xffff0000

08004008 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	; 0x30
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	4608      	mov	r0, r1
 8004012:	4611      	mov	r1, r2
 8004014:	461a      	mov	r2, r3
 8004016:	4603      	mov	r3, r0
 8004018:	817b      	strh	r3, [r7, #10]
 800401a:	460b      	mov	r3, r1
 800401c:	813b      	strh	r3, [r7, #8]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004022:	f7fe feff 	bl	8002e24 <HAL_GetTick>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b20      	cmp	r3, #32
 8004032:	f040 8208 	bne.w	8004446 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2319      	movs	r3, #25
 800403c:	2201      	movs	r2, #1
 800403e:	497b      	ldr	r1, [pc, #492]	; (800422c <HAL_I2C_Mem_Read+0x224>)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fc9f 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
 800404e:	e1fb      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_I2C_Mem_Read+0x56>
 800405a:	2302      	movs	r3, #2
 800405c:	e1f4      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d007      	beq.n	8004084 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2222      	movs	r2, #34	; 0x22
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2240      	movs	r2, #64	; 0x40
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a5b      	ldr	r2, [pc, #364]	; (8004230 <HAL_I2C_Mem_Read+0x228>)
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c6:	88f8      	ldrh	r0, [r7, #6]
 80040c8:	893a      	ldrh	r2, [r7, #8]
 80040ca:	8979      	ldrh	r1, [r7, #10]
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4603      	mov	r3, r0
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fb6c 	bl	80047b4 <I2C_RequestMemoryRead>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1b0      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d113      	bne.n	8004116 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e184      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	2b01      	cmp	r3, #1
 800411c:	d11b      	bne.n	8004156 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e164      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	2b02      	cmp	r3, #2
 800415c:	d11b      	bne.n	8004196 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	e144      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041ac:	e138      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	f200 80f1 	bhi.w	800439a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d123      	bne.n	8004208 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fd35 	bl	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e139      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004206:	e10b      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	2b02      	cmp	r3, #2
 800420e:	d14e      	bne.n	80042ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	2200      	movs	r2, #0
 8004218:	4906      	ldr	r1, [pc, #24]	; (8004234 <HAL_I2C_Mem_Read+0x22c>)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fbb2 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e10e      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
 800422a:	bf00      	nop
 800422c:	00100002 	.word	0x00100002
 8004230:	ffff0000 	.word	0xffff0000
 8004234:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042ac:	e0b8      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	2200      	movs	r2, #0
 80042b6:	4966      	ldr	r1, [pc, #408]	; (8004450 <HAL_I2C_Mem_Read+0x448>)
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fb63 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0bf      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	2200      	movs	r2, #0
 8004312:	494f      	ldr	r1, [pc, #316]	; (8004450 <HAL_I2C_Mem_Read+0x448>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fb35 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e091      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004398:	e042      	b.n	8004420 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fc48 	bl	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e04c      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d118      	bne.n	8004420 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f aec2 	bne.w	80041ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e000      	b.n	8004448 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004446:	2302      	movs	r3, #2
  }
}
 8004448:	4618      	mov	r0, r3
 800444a:	3728      	adds	r7, #40	; 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	00010004 	.word	0x00010004

08004454 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	460b      	mov	r3, r1
 8004462:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004464:	f7fe fcde 	bl	8002e24 <HAL_GetTick>
 8004468:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800446a:	2301      	movs	r3, #1
 800446c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b20      	cmp	r3, #32
 8004478:	f040 8111 	bne.w	800469e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2319      	movs	r3, #25
 8004482:	2201      	movs	r2, #1
 8004484:	4988      	ldr	r1, [pc, #544]	; (80046a8 <HAL_I2C_IsDeviceReady+0x254>)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa7c 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
 8004494:	e104      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_I2C_IsDeviceReady+0x50>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0fd      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d007      	beq.n	80044ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2224      	movs	r2, #36	; 0x24
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a70      	ldr	r2, [pc, #448]	; (80046ac <HAL_I2C_IsDeviceReady+0x258>)
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2200      	movs	r2, #0
 8004506:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fa3a 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004524:	d103      	bne.n	800452e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0b6      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004540:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004542:	f7fe fc6f 	bl	8002e24 <HAL_GetTick>
 8004546:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b02      	cmp	r3, #2
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004576:	e025      	b.n	80045c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004578:	f7fe fc54 	bl	8002e24 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d302      	bcc.n	800458e <HAL_I2C_IsDeviceReady+0x13a>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	22a0      	movs	r2, #160	; 0xa0
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2ba0      	cmp	r3, #160	; 0xa0
 80045ce:	d005      	beq.n	80045dc <HAL_I2C_IsDeviceReady+0x188>
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <HAL_I2C_IsDeviceReady+0x188>
 80045d6:	7dbb      	ldrb	r3, [r7, #22]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0cd      	beq.n	8004578 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d129      	bne.n	8004646 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004600:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2319      	movs	r3, #25
 800461e:	2201      	movs	r2, #1
 8004620:	4921      	ldr	r1, [pc, #132]	; (80046a8 <HAL_I2C_IsDeviceReady+0x254>)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f9ae 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e036      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e02c      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004654:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800465e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	2319      	movs	r3, #25
 8004666:	2201      	movs	r2, #1
 8004668:	490f      	ldr	r1, [pc, #60]	; (80046a8 <HAL_I2C_IsDeviceReady+0x254>)
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f98a 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e012      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	3301      	adds	r3, #1
 800467e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	f4ff af32 	bcc.w	80044ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3720      	adds	r7, #32
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	00100002 	.word	0x00100002
 80046ac:	ffff0000 	.word	0xffff0000

080046b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	460b      	mov	r3, r1
 80046be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d006      	beq.n	80046da <I2C_MasterRequestWrite+0x2a>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d003      	beq.n	80046da <I2C_MasterRequestWrite+0x2a>
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d8:	d108      	bne.n	80046ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e00b      	b.n	8004704 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b12      	cmp	r3, #18
 80046f2:	d107      	bne.n	8004704 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f937 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d103      	bne.n	8004734 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e035      	b.n	80047a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004740:	d108      	bne.n	8004754 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004742:	897b      	ldrh	r3, [r7, #10]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004750:	611a      	str	r2, [r3, #16]
 8004752:	e01b      	b.n	800478c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004754:	897b      	ldrh	r3, [r7, #10]
 8004756:	11db      	asrs	r3, r3, #7
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f063 030f 	orn	r3, r3, #15
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	490e      	ldr	r1, [pc, #56]	; (80047ac <I2C_MasterRequestWrite+0xfc>)
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f95d 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e010      	b.n	80047a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004782:	897b      	ldrh	r3, [r7, #10]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4907      	ldr	r1, [pc, #28]	; (80047b0 <I2C_MasterRequestWrite+0x100>)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f94d 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	00010008 	.word	0x00010008
 80047b0:	00010002 	.word	0x00010002

080047b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	817b      	strh	r3, [r7, #10]
 80047c6:	460b      	mov	r3, r1
 80047c8:	813b      	strh	r3, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f8c2 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004814:	d103      	bne.n	800481e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e0aa      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	4952      	ldr	r1, [pc, #328]	; (8004980 <I2C_RequestMemoryRead+0x1cc>)
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f8fa 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e097      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004860:	6a39      	ldr	r1, [r7, #32]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f964 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	2b04      	cmp	r3, #4
 8004874:	d107      	bne.n	8004886 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e076      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004890:	893b      	ldrh	r3, [r7, #8]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	e021      	b.n	80048e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800489c:	893b      	ldrh	r3, [r7, #8]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ac:	6a39      	ldr	r1, [r7, #32]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f93e 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00d      	beq.n	80048d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d107      	bne.n	80048d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e050      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d6:	893b      	ldrh	r3, [r7, #8]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e2:	6a39      	ldr	r1, [r7, #32]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f923 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d107      	bne.n	8004908 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004906:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e035      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2200      	movs	r2, #0
 8004924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f82b 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d103      	bne.n	800494c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800494a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e013      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004950:	897b      	ldrh	r3, [r7, #10]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	4906      	ldr	r1, [pc, #24]	; (8004980 <I2C_RequestMemoryRead+0x1cc>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f863 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	00010002 	.word	0x00010002

08004984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004994:	e025      	b.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d021      	beq.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe fa41 	bl	8002e24 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d116      	bne.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e023      	b.n	8004a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d10d      	bne.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	43da      	mvns	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4013      	ands	r3, r2
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	e00c      	b.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d0b6      	beq.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a40:	e051      	b.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d123      	bne.n	8004a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0204 	orr.w	r2, r3, #4
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e046      	b.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d021      	beq.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fe f9bf 	bl	8002e24 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e020      	b.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10c      	bne.n	8004b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	43da      	mvns	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e00b      	b.n	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	43da      	mvns	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf14      	ite	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d18d      	bne.n	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b3c:	e02d      	b.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f8ce 	bl	8004ce0 <I2C_IsAcknowledgeFailed>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e02d      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d021      	beq.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b56:	f7fe f965 	bl	8002e24 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d116      	bne.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f043 0220 	orr.w	r2, r3, #32
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e007      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d1ca      	bne.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bbe:	e02d      	b.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f88d 	bl	8004ce0 <I2C_IsAcknowledgeFailed>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e02d      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d021      	beq.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fe f924 	bl	8002e24 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d116      	bne.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e007      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d1ca      	bne.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c40:	e042      	b.n	8004cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d119      	bne.n	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0210 	mvn.w	r2, #16
 8004c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e029      	b.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7fe f8ce 	bl	8002e24 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e007      	b.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d1b5      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf6:	d11b      	bne.n	8004d30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f043 0204 	orr.w	r2, r3, #4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e264      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d075      	beq.n	8004e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d5e:	4ba3      	ldr	r3, [pc, #652]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d00c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6a:	4ba0      	ldr	r3, [pc, #640]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d112      	bne.n	8004d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d76:	4b9d      	ldr	r3, [pc, #628]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d82:	d10b      	bne.n	8004d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	4b99      	ldr	r3, [pc, #612]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05b      	beq.n	8004e48 <HAL_RCC_OscConfig+0x108>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d157      	bne.n	8004e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e23f      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da4:	d106      	bne.n	8004db4 <HAL_RCC_OscConfig+0x74>
 8004da6:	4b91      	ldr	r3, [pc, #580]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a90      	ldr	r2, [pc, #576]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e01d      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x98>
 8004dbe:	4b8b      	ldr	r3, [pc, #556]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a8a      	ldr	r2, [pc, #552]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b88      	ldr	r3, [pc, #544]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a87      	ldr	r2, [pc, #540]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004dd8:	4b84      	ldr	r3, [pc, #528]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a83      	ldr	r2, [pc, #524]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b81      	ldr	r3, [pc, #516]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a80      	ldr	r2, [pc, #512]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d013      	beq.n	8004e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7fe f814 	bl	8002e24 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e00:	f7fe f810 	bl	8002e24 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e204      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	4b76      	ldr	r3, [pc, #472]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0xc0>
 8004e1e:	e014      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fe f800 	bl	8002e24 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fd fffc 	bl	8002e24 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e1f0      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3a:	4b6c      	ldr	r3, [pc, #432]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0xe8>
 8004e46:	e000      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d063      	beq.n	8004f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e56:	4b65      	ldr	r3, [pc, #404]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e62:	4b62      	ldr	r3, [pc, #392]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6e:	4b5f      	ldr	r3, [pc, #380]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d116      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7a:	4b5c      	ldr	r3, [pc, #368]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_RCC_OscConfig+0x152>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e1c4      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e92:	4b56      	ldr	r3, [pc, #344]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4952      	ldr	r1, [pc, #328]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea6:	e03a      	b.n	8004f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb0:	4b4f      	ldr	r3, [pc, #316]	; (8004ff0 <HAL_RCC_OscConfig+0x2b0>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fd ffb5 	bl	8002e24 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fd ffb1 	bl	8002e24 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e1a5      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed0:	4b46      	ldr	r3, [pc, #280]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b43      	ldr	r3, [pc, #268]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4940      	ldr	r1, [pc, #256]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	600b      	str	r3, [r1, #0]
 8004ef0:	e015      	b.n	8004f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef2:	4b3f      	ldr	r3, [pc, #252]	; (8004ff0 <HAL_RCC_OscConfig+0x2b0>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fd ff94 	bl	8002e24 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f00:	f7fd ff90 	bl	8002e24 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e184      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f12:	4b36      	ldr	r3, [pc, #216]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d030      	beq.n	8004f8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f32:	4b30      	ldr	r3, [pc, #192]	; (8004ff4 <HAL_RCC_OscConfig+0x2b4>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fd ff74 	bl	8002e24 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f40:	f7fd ff70 	bl	8002e24 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e164      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f52:	4b26      	ldr	r3, [pc, #152]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x200>
 8004f5e:	e015      	b.n	8004f8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f60:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <HAL_RCC_OscConfig+0x2b4>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f66:	f7fd ff5d 	bl	8002e24 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fd ff59 	bl	8002e24 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e14d      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f80:	4b1a      	ldr	r3, [pc, #104]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a0 	beq.w	80050da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10f      	bne.n	8004fca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fba:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_RCC_OscConfig+0x2b8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d121      	bne.n	800501a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd6:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <HAL_RCC_OscConfig+0x2b8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a07      	ldr	r2, [pc, #28]	; (8004ff8 <HAL_RCC_OscConfig+0x2b8>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe2:	f7fd ff1f 	bl	8002e24 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe8:	e011      	b.n	800500e <HAL_RCC_OscConfig+0x2ce>
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	42470000 	.word	0x42470000
 8004ff4:	42470e80 	.word	0x42470e80
 8004ff8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffc:	f7fd ff12 	bl	8002e24 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e106      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500e:	4b85      	ldr	r3, [pc, #532]	; (8005224 <HAL_RCC_OscConfig+0x4e4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d106      	bne.n	8005030 <HAL_RCC_OscConfig+0x2f0>
 8005022:	4b81      	ldr	r3, [pc, #516]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	4a80      	ldr	r2, [pc, #512]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	6713      	str	r3, [r2, #112]	; 0x70
 800502e:	e01c      	b.n	800506a <HAL_RCC_OscConfig+0x32a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b05      	cmp	r3, #5
 8005036:	d10c      	bne.n	8005052 <HAL_RCC_OscConfig+0x312>
 8005038:	4b7b      	ldr	r3, [pc, #492]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	4a7a      	ldr	r2, [pc, #488]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 800503e:	f043 0304 	orr.w	r3, r3, #4
 8005042:	6713      	str	r3, [r2, #112]	; 0x70
 8005044:	4b78      	ldr	r3, [pc, #480]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	4a77      	ldr	r2, [pc, #476]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6713      	str	r3, [r2, #112]	; 0x70
 8005050:	e00b      	b.n	800506a <HAL_RCC_OscConfig+0x32a>
 8005052:	4b75      	ldr	r3, [pc, #468]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	4a74      	ldr	r2, [pc, #464]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	6713      	str	r3, [r2, #112]	; 0x70
 800505e:	4b72      	ldr	r3, [pc, #456]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	4a71      	ldr	r2, [pc, #452]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 8005064:	f023 0304 	bic.w	r3, r3, #4
 8005068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d015      	beq.n	800509e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005072:	f7fd fed7 	bl	8002e24 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005078:	e00a      	b.n	8005090 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fd fed3 	bl	8002e24 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	; 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e0c5      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005090:	4b65      	ldr	r3, [pc, #404]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ee      	beq.n	800507a <HAL_RCC_OscConfig+0x33a>
 800509c:	e014      	b.n	80050c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509e:	f7fd fec1 	bl	8002e24 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd febd 	bl	8002e24 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0af      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050bc:	4b5a      	ldr	r3, [pc, #360]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ee      	bne.n	80050a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ce:	4b56      	ldr	r3, [pc, #344]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	4a55      	ldr	r2, [pc, #340]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 80050d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 809b 	beq.w	800521a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050e4:	4b50      	ldr	r3, [pc, #320]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d05c      	beq.n	80051aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d141      	bne.n	800517c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f8:	4b4c      	ldr	r3, [pc, #304]	; (800522c <HAL_RCC_OscConfig+0x4ec>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fe:	f7fd fe91 	bl	8002e24 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005106:	f7fd fe8d 	bl	8002e24 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e081      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005118:	4b43      	ldr	r3, [pc, #268]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	019b      	lsls	r3, r3, #6
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	3b01      	subs	r3, #1
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	061b      	lsls	r3, r3, #24
 8005148:	4937      	ldr	r1, [pc, #220]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 800514a:	4313      	orrs	r3, r2
 800514c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800514e:	4b37      	ldr	r3, [pc, #220]	; (800522c <HAL_RCC_OscConfig+0x4ec>)
 8005150:	2201      	movs	r2, #1
 8005152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fd fe66 	bl	8002e24 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515c:	f7fd fe62 	bl	8002e24 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e056      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516e:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0x41c>
 800517a:	e04e      	b.n	800521a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517c:	4b2b      	ldr	r3, [pc, #172]	; (800522c <HAL_RCC_OscConfig+0x4ec>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005182:	f7fd fe4f 	bl	8002e24 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518a:	f7fd fe4b 	bl	8002e24 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e03f      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519c:	4b22      	ldr	r3, [pc, #136]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <HAL_RCC_OscConfig+0x44a>
 80051a8:	e037      	b.n	800521a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e032      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051b6:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <HAL_RCC_OscConfig+0x4e8>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d028      	beq.n	8005216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d121      	bne.n	8005216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d11a      	bne.n	8005216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051e6:	4013      	ands	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d111      	bne.n	8005216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	3b01      	subs	r3, #1
 8005200:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005202:	429a      	cmp	r2, r3
 8005204:	d107      	bne.n	8005216 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d001      	beq.n	800521a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40007000 	.word	0x40007000
 8005228:	40023800 	.word	0x40023800
 800522c:	42470060 	.word	0x42470060

08005230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0cc      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005244:	4b68      	ldr	r3, [pc, #416]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d90c      	bls.n	800526c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b65      	ldr	r3, [pc, #404]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b63      	ldr	r3, [pc, #396]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0b8      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005284:	4b59      	ldr	r3, [pc, #356]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a58      	ldr	r2, [pc, #352]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800528e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800529c:	4b53      	ldr	r3, [pc, #332]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a52      	ldr	r2, [pc, #328]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a8:	4b50      	ldr	r3, [pc, #320]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	494d      	ldr	r1, [pc, #308]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d044      	beq.n	8005350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d119      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e07f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d003      	beq.n	80052ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ee:	4b3f      	ldr	r3, [pc, #252]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e06f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fe:	4b3b      	ldr	r3, [pc, #236]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e067      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530e:	4b37      	ldr	r3, [pc, #220]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 0203 	bic.w	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4934      	ldr	r1, [pc, #208]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005320:	f7fd fd80 	bl	8002e24 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	e00a      	b.n	800533e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005328:	f7fd fd7c 	bl	8002e24 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e04f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	4b2b      	ldr	r3, [pc, #172]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 020c 	and.w	r2, r3, #12
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	429a      	cmp	r2, r3
 800534e:	d1eb      	bne.n	8005328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005350:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d20c      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e032      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4916      	ldr	r1, [pc, #88]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	490e      	ldr	r1, [pc, #56]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053b6:	f000 f821 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80053ba:	4602      	mov	r2, r0
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	490a      	ldr	r1, [pc, #40]	; (80053f0 <HAL_RCC_ClockConfig+0x1c0>)
 80053c8:	5ccb      	ldrb	r3, [r1, r3]
 80053ca:	fa22 f303 	lsr.w	r3, r2, r3
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fd fce0 	bl	8002d9c <HAL_InitTick>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023c00 	.word	0x40023c00
 80053ec:	40023800 	.word	0x40023800
 80053f0:	08007a68 	.word	0x08007a68
 80053f4:	20000004 	.word	0x20000004
 80053f8:	20000008 	.word	0x20000008

080053fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053fc:	b5b0      	push	{r4, r5, r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005402:	2100      	movs	r1, #0
 8005404:	6079      	str	r1, [r7, #4]
 8005406:	2100      	movs	r1, #0
 8005408:	60f9      	str	r1, [r7, #12]
 800540a:	2100      	movs	r1, #0
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800540e:	2100      	movs	r1, #0
 8005410:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005412:	4952      	ldr	r1, [pc, #328]	; (800555c <HAL_RCC_GetSysClockFreq+0x160>)
 8005414:	6889      	ldr	r1, [r1, #8]
 8005416:	f001 010c 	and.w	r1, r1, #12
 800541a:	2908      	cmp	r1, #8
 800541c:	d00d      	beq.n	800543a <HAL_RCC_GetSysClockFreq+0x3e>
 800541e:	2908      	cmp	r1, #8
 8005420:	f200 8094 	bhi.w	800554c <HAL_RCC_GetSysClockFreq+0x150>
 8005424:	2900      	cmp	r1, #0
 8005426:	d002      	beq.n	800542e <HAL_RCC_GetSysClockFreq+0x32>
 8005428:	2904      	cmp	r1, #4
 800542a:	d003      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x38>
 800542c:	e08e      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800542e:	4b4c      	ldr	r3, [pc, #304]	; (8005560 <HAL_RCC_GetSysClockFreq+0x164>)
 8005430:	60bb      	str	r3, [r7, #8]
       break;
 8005432:	e08e      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005434:	4b4b      	ldr	r3, [pc, #300]	; (8005564 <HAL_RCC_GetSysClockFreq+0x168>)
 8005436:	60bb      	str	r3, [r7, #8]
      break;
 8005438:	e08b      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800543a:	4948      	ldr	r1, [pc, #288]	; (800555c <HAL_RCC_GetSysClockFreq+0x160>)
 800543c:	6849      	ldr	r1, [r1, #4]
 800543e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005442:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005444:	4945      	ldr	r1, [pc, #276]	; (800555c <HAL_RCC_GetSysClockFreq+0x160>)
 8005446:	6849      	ldr	r1, [r1, #4]
 8005448:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800544c:	2900      	cmp	r1, #0
 800544e:	d024      	beq.n	800549a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005450:	4942      	ldr	r1, [pc, #264]	; (800555c <HAL_RCC_GetSysClockFreq+0x160>)
 8005452:	6849      	ldr	r1, [r1, #4]
 8005454:	0989      	lsrs	r1, r1, #6
 8005456:	4608      	mov	r0, r1
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005460:	f04f 0500 	mov.w	r5, #0
 8005464:	ea00 0204 	and.w	r2, r0, r4
 8005468:	ea01 0305 	and.w	r3, r1, r5
 800546c:	493d      	ldr	r1, [pc, #244]	; (8005564 <HAL_RCC_GetSysClockFreq+0x168>)
 800546e:	fb01 f003 	mul.w	r0, r1, r3
 8005472:	2100      	movs	r1, #0
 8005474:	fb01 f102 	mul.w	r1, r1, r2
 8005478:	1844      	adds	r4, r0, r1
 800547a:	493a      	ldr	r1, [pc, #232]	; (8005564 <HAL_RCC_GetSysClockFreq+0x168>)
 800547c:	fba2 0101 	umull	r0, r1, r2, r1
 8005480:	1863      	adds	r3, r4, r1
 8005482:	4619      	mov	r1, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	461a      	mov	r2, r3
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	f7fb fb96 	bl	8000bbc <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e04a      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549a:	4b30      	ldr	r3, [pc, #192]	; (800555c <HAL_RCC_GetSysClockFreq+0x160>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	461a      	mov	r2, r3
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	ea02 0400 	and.w	r4, r2, r0
 80054b2:	ea03 0501 	and.w	r5, r3, r1
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	014b      	lsls	r3, r1, #5
 80054c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054c8:	0142      	lsls	r2, r0, #5
 80054ca:	4610      	mov	r0, r2
 80054cc:	4619      	mov	r1, r3
 80054ce:	1b00      	subs	r0, r0, r4
 80054d0:	eb61 0105 	sbc.w	r1, r1, r5
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	018b      	lsls	r3, r1, #6
 80054de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054e2:	0182      	lsls	r2, r0, #6
 80054e4:	1a12      	subs	r2, r2, r0
 80054e6:	eb63 0301 	sbc.w	r3, r3, r1
 80054ea:	f04f 0000 	mov.w	r0, #0
 80054ee:	f04f 0100 	mov.w	r1, #0
 80054f2:	00d9      	lsls	r1, r3, #3
 80054f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054f8:	00d0      	lsls	r0, r2, #3
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	1912      	adds	r2, r2, r4
 8005500:	eb45 0303 	adc.w	r3, r5, r3
 8005504:	f04f 0000 	mov.w	r0, #0
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	0299      	lsls	r1, r3, #10
 800550e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005512:	0290      	lsls	r0, r2, #10
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	461a      	mov	r2, r3
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	f7fb fb4a 	bl	8000bbc <__aeabi_uldivmod>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4613      	mov	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <HAL_RCC_GetSysClockFreq+0x160>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	0c1b      	lsrs	r3, r3, #16
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	3301      	adds	r3, #1
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	60bb      	str	r3, [r7, #8]
      break;
 800554a:	e002      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800554c:	4b04      	ldr	r3, [pc, #16]	; (8005560 <HAL_RCC_GetSysClockFreq+0x164>)
 800554e:	60bb      	str	r3, [r7, #8]
      break;
 8005550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005552:	68bb      	ldr	r3, [r7, #8]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bdb0      	pop	{r4, r5, r7, pc}
 800555c:	40023800 	.word	0x40023800
 8005560:	00f42400 	.word	0x00f42400
 8005564:	017d7840 	.word	0x017d7840

08005568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800556c:	4b03      	ldr	r3, [pc, #12]	; (800557c <HAL_RCC_GetHCLKFreq+0x14>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000004 	.word	0x20000004

08005580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005584:	f7ff fff0 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	0a9b      	lsrs	r3, r3, #10
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	4903      	ldr	r1, [pc, #12]	; (80055a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40023800 	.word	0x40023800
 80055a4:	08007a78 	.word	0x08007a78

080055a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055ac:	f7ff ffdc 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	0b5b      	lsrs	r3, r3, #13
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4903      	ldr	r1, [pc, #12]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40023800 	.word	0x40023800
 80055cc:	08007a78 	.word	0x08007a78

080055d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e041      	b.n	8005666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fd f9cc 	bl	8002994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f000 fcc8 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d001      	beq.n	8005688 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e046      	b.n	8005716 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a23      	ldr	r2, [pc, #140]	; (8005724 <HAL_TIM_Base_Start+0xb4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d022      	beq.n	80056e0 <HAL_TIM_Base_Start+0x70>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a2:	d01d      	beq.n	80056e0 <HAL_TIM_Base_Start+0x70>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <HAL_TIM_Base_Start+0xb8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d018      	beq.n	80056e0 <HAL_TIM_Base_Start+0x70>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	; (800572c <HAL_TIM_Base_Start+0xbc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <HAL_TIM_Base_Start+0x70>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1c      	ldr	r2, [pc, #112]	; (8005730 <HAL_TIM_Base_Start+0xc0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00e      	beq.n	80056e0 <HAL_TIM_Base_Start+0x70>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <HAL_TIM_Base_Start+0xc4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d009      	beq.n	80056e0 <HAL_TIM_Base_Start+0x70>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <HAL_TIM_Base_Start+0xc8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_TIM_Base_Start+0x70>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_TIM_Base_Start+0xcc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d111      	bne.n	8005704 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b06      	cmp	r3, #6
 80056f0:	d010      	beq.n	8005714 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005702:	e007      	b.n	8005714 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40010400 	.word	0x40010400
 8005738:	40014000 	.word	0x40014000
 800573c:	40001800 	.word	0x40001800

08005740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e041      	b.n	80057d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fd f8dc 	bl	8002924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f000 fc10 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_TIM_PWM_Start+0x24>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	e022      	b.n	800584a <HAL_TIM_PWM_Start+0x6a>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b04      	cmp	r3, #4
 8005808:	d109      	bne.n	800581e <HAL_TIM_PWM_Start+0x3e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	bf14      	ite	ne
 8005816:	2301      	movne	r3, #1
 8005818:	2300      	moveq	r3, #0
 800581a:	b2db      	uxtb	r3, r3
 800581c:	e015      	b.n	800584a <HAL_TIM_PWM_Start+0x6a>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d109      	bne.n	8005838 <HAL_TIM_PWM_Start+0x58>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	e008      	b.n	800584a <HAL_TIM_PWM_Start+0x6a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	bf14      	ite	ne
 8005844:	2301      	movne	r3, #1
 8005846:	2300      	moveq	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e07c      	b.n	800594c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <HAL_TIM_PWM_Start+0x82>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005860:	e013      	b.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b04      	cmp	r3, #4
 8005866:	d104      	bne.n	8005872 <HAL_TIM_PWM_Start+0x92>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005870:	e00b      	b.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d104      	bne.n	8005882 <HAL_TIM_PWM_Start+0xa2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005880:	e003      	b.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2201      	movs	r2, #1
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f001 f811 	bl	80068ba <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a2d      	ldr	r2, [pc, #180]	; (8005954 <HAL_TIM_PWM_Start+0x174>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_TIM_PWM_Start+0xcc>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a2c      	ldr	r2, [pc, #176]	; (8005958 <HAL_TIM_PWM_Start+0x178>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d101      	bne.n	80058b0 <HAL_TIM_PWM_Start+0xd0>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <HAL_TIM_PWM_Start+0xd2>
 80058b0:	2300      	movs	r3, #0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a22      	ldr	r2, [pc, #136]	; (8005954 <HAL_TIM_PWM_Start+0x174>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d022      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d8:	d01d      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1f      	ldr	r2, [pc, #124]	; (800595c <HAL_TIM_PWM_Start+0x17c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d018      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1d      	ldr	r2, [pc, #116]	; (8005960 <HAL_TIM_PWM_Start+0x180>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <HAL_TIM_PWM_Start+0x184>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00e      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a16      	ldr	r2, [pc, #88]	; (8005958 <HAL_TIM_PWM_Start+0x178>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a18      	ldr	r2, [pc, #96]	; (8005968 <HAL_TIM_PWM_Start+0x188>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d004      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a16      	ldr	r2, [pc, #88]	; (800596c <HAL_TIM_PWM_Start+0x18c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d111      	bne.n	800593a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b06      	cmp	r3, #6
 8005926:	d010      	beq.n	800594a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005938:	e007      	b.n	800594a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40010000 	.word	0x40010000
 8005958:	40010400 	.word	0x40010400
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40014000 	.word	0x40014000
 800596c:	40001800 	.word	0x40001800

08005970 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e041      	b.n	8005a06 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f839 	bl	8005a0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4619      	mov	r1, r3
 80059ae:	4610      	mov	r0, r2
 80059b0:	f000 faf8 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <HAL_TIM_IC_Start+0x1a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	e013      	b.n	8005a66 <HAL_TIM_IC_Start+0x42>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d104      	bne.n	8005a4e <HAL_TIM_IC_Start+0x2a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	e00b      	b.n	8005a66 <HAL_TIM_IC_Start+0x42>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d104      	bne.n	8005a5e <HAL_TIM_IC_Start+0x3a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e003      	b.n	8005a66 <HAL_TIM_IC_Start+0x42>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <HAL_TIM_IC_Start+0x54>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e013      	b.n	8005aa0 <HAL_TIM_IC_Start+0x7c>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d104      	bne.n	8005a88 <HAL_TIM_IC_Start+0x64>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e00b      	b.n	8005aa0 <HAL_TIM_IC_Start+0x7c>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d104      	bne.n	8005a98 <HAL_TIM_IC_Start+0x74>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e003      	b.n	8005aa0 <HAL_TIM_IC_Start+0x7c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d102      	bne.n	8005aae <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d001      	beq.n	8005ab2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e081      	b.n	8005bb6 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_IC_Start+0x9e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac0:	e013      	b.n	8005aea <HAL_TIM_IC_Start+0xc6>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_IC_Start+0xae>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad0:	e00b      	b.n	8005aea <HAL_TIM_IC_Start+0xc6>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_IC_Start+0xbe>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae0:	e003      	b.n	8005aea <HAL_TIM_IC_Start+0xc6>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_IC_Start+0xd6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af8:	e013      	b.n	8005b22 <HAL_TIM_IC_Start+0xfe>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_IC_Start+0xe6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b08:	e00b      	b.n	8005b22 <HAL_TIM_IC_Start+0xfe>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIM_IC_Start+0xf6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b18:	e003      	b.n	8005b22 <HAL_TIM_IC_Start+0xfe>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2201      	movs	r2, #1
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fec5 	bl	80068ba <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a22      	ldr	r2, [pc, #136]	; (8005bc0 <HAL_TIM_IC_Start+0x19c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d022      	beq.n	8005b80 <HAL_TIM_IC_Start+0x15c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d01d      	beq.n	8005b80 <HAL_TIM_IC_Start+0x15c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1e      	ldr	r2, [pc, #120]	; (8005bc4 <HAL_TIM_IC_Start+0x1a0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <HAL_TIM_IC_Start+0x15c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <HAL_TIM_IC_Start+0x1a4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_TIM_IC_Start+0x15c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1b      	ldr	r2, [pc, #108]	; (8005bcc <HAL_TIM_IC_Start+0x1a8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_TIM_IC_Start+0x15c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1a      	ldr	r2, [pc, #104]	; (8005bd0 <HAL_TIM_IC_Start+0x1ac>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_TIM_IC_Start+0x15c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <HAL_TIM_IC_Start+0x1b0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIM_IC_Start+0x15c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <HAL_TIM_IC_Start+0x1b4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d111      	bne.n	8005ba4 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d010      	beq.n	8005bb4 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0201 	orr.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba2:	e007      	b.n	8005bb4 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00
 8005bd0:	40010400 	.word	0x40010400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40001800 	.word	0x40001800

08005bdc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_TIM_IC_ConfigChannel+0x1e>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e088      	b.n	8005d0c <HAL_TIM_IC_ConfigChannel+0x130>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d11b      	bne.n	8005c40 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f000 fca6 	bl	8006568 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 020c 	bic.w	r2, r2, #12
 8005c2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	619a      	str	r2, [r3, #24]
 8005c3e:	e060      	b.n	8005d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d11c      	bne.n	8005c80 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f000 fd2a 	bl	80066ae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6999      	ldr	r1, [r3, #24]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	021a      	lsls	r2, r3, #8
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	619a      	str	r2, [r3, #24]
 8005c7e:	e040      	b.n	8005d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d11b      	bne.n	8005cbe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f000 fd77 	bl	8006788 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 020c 	bic.w	r2, r2, #12
 8005ca8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69d9      	ldr	r1, [r3, #28]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	61da      	str	r2, [r3, #28]
 8005cbc:	e021      	b.n	8005d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b0c      	cmp	r3, #12
 8005cc2:	d11c      	bne.n	8005cfe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6819      	ldr	r1, [r3, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f000 fd94 	bl	8006800 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69da      	ldr	r2, [r3, #28]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ce6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69d9      	ldr	r1, [r3, #28]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	021a      	lsls	r2, r3, #8
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	61da      	str	r2, [r3, #28]
 8005cfc:	e001      	b.n	8005d02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0ae      	b.n	8005e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b0c      	cmp	r3, #12
 8005d3e:	f200 809f 	bhi.w	8005e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d7d 	.word	0x08005d7d
 8005d4c:	08005e81 	.word	0x08005e81
 8005d50:	08005e81 	.word	0x08005e81
 8005d54:	08005e81 	.word	0x08005e81
 8005d58:	08005dbd 	.word	0x08005dbd
 8005d5c:	08005e81 	.word	0x08005e81
 8005d60:	08005e81 	.word	0x08005e81
 8005d64:	08005e81 	.word	0x08005e81
 8005d68:	08005dff 	.word	0x08005dff
 8005d6c:	08005e81 	.word	0x08005e81
 8005d70:	08005e81 	.word	0x08005e81
 8005d74:	08005e81 	.word	0x08005e81
 8005d78:	08005e3f 	.word	0x08005e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f9ae 	bl	80060e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0208 	orr.w	r2, r2, #8
 8005d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0204 	bic.w	r2, r2, #4
 8005da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6999      	ldr	r1, [r3, #24]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	619a      	str	r2, [r3, #24]
      break;
 8005dba:	e064      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f9fe 	bl	80061c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6999      	ldr	r1, [r3, #24]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	021a      	lsls	r2, r3, #8
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	619a      	str	r2, [r3, #24]
      break;
 8005dfc:	e043      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fa53 	bl	80062b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0208 	orr.w	r2, r2, #8
 8005e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0204 	bic.w	r2, r2, #4
 8005e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69d9      	ldr	r1, [r3, #28]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	61da      	str	r2, [r3, #28]
      break;
 8005e3c:	e023      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 faa7 	bl	8006398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69d9      	ldr	r1, [r3, #28]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	021a      	lsls	r2, r3, #8
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	61da      	str	r2, [r3, #28]
      break;
 8005e7e:	e002      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	75fb      	strb	r3, [r7, #23]
      break;
 8005e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e031      	b.n	8005f14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fabe 	bl	8006444 <TIM_SlaveTimer_SetConfig>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e018      	b.n	8005f14 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b0c      	cmp	r3, #12
 8005f2e:	d831      	bhi.n	8005f94 <HAL_TIM_ReadCapturedValue+0x78>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f6d 	.word	0x08005f6d
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005f95 	.word	0x08005f95
 8005f44:	08005f95 	.word	0x08005f95
 8005f48:	08005f77 	.word	0x08005f77
 8005f4c:	08005f95 	.word	0x08005f95
 8005f50:	08005f95 	.word	0x08005f95
 8005f54:	08005f95 	.word	0x08005f95
 8005f58:	08005f81 	.word	0x08005f81
 8005f5c:	08005f95 	.word	0x08005f95
 8005f60:	08005f95 	.word	0x08005f95
 8005f64:	08005f95 	.word	0x08005f95
 8005f68:	08005f8b 	.word	0x08005f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	60fb      	str	r3, [r7, #12]

      break;
 8005f74:	e00f      	b.n	8005f96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	60fb      	str	r3, [r7, #12]

      break;
 8005f7e:	e00a      	b.n	8005f96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	60fb      	str	r3, [r7, #12]

      break;
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	60fb      	str	r3, [r7, #12]

      break;
 8005f92:	e000      	b.n	8005f96 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f94:	bf00      	nop
  }

  return tmpreg;
 8005f96:	68fb      	ldr	r3, [r7, #12]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a40      	ldr	r2, [pc, #256]	; (80060b8 <TIM_Base_SetConfig+0x114>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a3d      	ldr	r2, [pc, #244]	; (80060bc <TIM_Base_SetConfig+0x118>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3c      	ldr	r2, [pc, #240]	; (80060c0 <TIM_Base_SetConfig+0x11c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3b      	ldr	r2, [pc, #236]	; (80060c4 <TIM_Base_SetConfig+0x120>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a3a      	ldr	r2, [pc, #232]	; (80060c8 <TIM_Base_SetConfig+0x124>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a2f      	ldr	r2, [pc, #188]	; (80060b8 <TIM_Base_SetConfig+0x114>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d02b      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006004:	d027      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2c      	ldr	r2, [pc, #176]	; (80060bc <TIM_Base_SetConfig+0x118>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d023      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2b      	ldr	r2, [pc, #172]	; (80060c0 <TIM_Base_SetConfig+0x11c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01f      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2a      	ldr	r2, [pc, #168]	; (80060c4 <TIM_Base_SetConfig+0x120>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01b      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a29      	ldr	r2, [pc, #164]	; (80060c8 <TIM_Base_SetConfig+0x124>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d017      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a28      	ldr	r2, [pc, #160]	; (80060cc <TIM_Base_SetConfig+0x128>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a27      	ldr	r2, [pc, #156]	; (80060d0 <TIM_Base_SetConfig+0x12c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00f      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a26      	ldr	r2, [pc, #152]	; (80060d4 <TIM_Base_SetConfig+0x130>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00b      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a25      	ldr	r2, [pc, #148]	; (80060d8 <TIM_Base_SetConfig+0x134>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a24      	ldr	r2, [pc, #144]	; (80060dc <TIM_Base_SetConfig+0x138>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a23      	ldr	r2, [pc, #140]	; (80060e0 <TIM_Base_SetConfig+0x13c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <TIM_Base_SetConfig+0x114>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_Base_SetConfig+0xf8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a0c      	ldr	r2, [pc, #48]	; (80060c8 <TIM_Base_SetConfig+0x124>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d103      	bne.n	80060a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	615a      	str	r2, [r3, #20]
}
 80060aa:	bf00      	nop
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40010000 	.word	0x40010000
 80060bc:	40000400 	.word	0x40000400
 80060c0:	40000800 	.word	0x40000800
 80060c4:	40000c00 	.word	0x40000c00
 80060c8:	40010400 	.word	0x40010400
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800
 80060d8:	40001800 	.word	0x40001800
 80060dc:	40001c00 	.word	0x40001c00
 80060e0:	40002000 	.word	0x40002000

080060e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 0302 	bic.w	r3, r3, #2
 800612c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a20      	ldr	r2, [pc, #128]	; (80061bc <TIM_OC1_SetConfig+0xd8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_OC1_SetConfig+0x64>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <TIM_OC1_SetConfig+0xdc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d10c      	bne.n	8006162 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f023 0308 	bic.w	r3, r3, #8
 800614e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 0304 	bic.w	r3, r3, #4
 8006160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <TIM_OC1_SetConfig+0xd8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_OC1_SetConfig+0x8e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <TIM_OC1_SetConfig+0xdc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d111      	bne.n	8006196 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	621a      	str	r2, [r3, #32]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40010400 	.word	0x40010400

080061c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f023 0210 	bic.w	r2, r3, #16
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0320 	bic.w	r3, r3, #32
 800620e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a22      	ldr	r2, [pc, #136]	; (80062a8 <TIM_OC2_SetConfig+0xe4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_OC2_SetConfig+0x68>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a21      	ldr	r2, [pc, #132]	; (80062ac <TIM_OC2_SetConfig+0xe8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d10d      	bne.n	8006248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <TIM_OC2_SetConfig+0xe4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC2_SetConfig+0x94>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a16      	ldr	r2, [pc, #88]	; (80062ac <TIM_OC2_SetConfig+0xe8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d113      	bne.n	8006280 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800625e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40010400 	.word	0x40010400

080062b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a21      	ldr	r2, [pc, #132]	; (8006390 <TIM_OC3_SetConfig+0xe0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_OC3_SetConfig+0x66>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a20      	ldr	r2, [pc, #128]	; (8006394 <TIM_OC3_SetConfig+0xe4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10d      	bne.n	8006332 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800631c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a16      	ldr	r2, [pc, #88]	; (8006390 <TIM_OC3_SetConfig+0xe0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_OC3_SetConfig+0x92>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a15      	ldr	r2, [pc, #84]	; (8006394 <TIM_OC3_SetConfig+0xe4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d113      	bne.n	800636a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	40010000 	.word	0x40010000
 8006394:	40010400 	.word	0x40010400

08006398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	031b      	lsls	r3, r3, #12
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a12      	ldr	r2, [pc, #72]	; (800643c <TIM_OC4_SetConfig+0xa4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC4_SetConfig+0x68>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a11      	ldr	r2, [pc, #68]	; (8006440 <TIM_OC4_SetConfig+0xa8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d109      	bne.n	8006414 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	019b      	lsls	r3, r3, #6
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40010000 	.word	0x40010000
 8006440:	40010400 	.word	0x40010400

08006444 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 0307 	bic.w	r3, r3, #7
 8006472:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b70      	cmp	r3, #112	; 0x70
 800648c:	d01a      	beq.n	80064c4 <TIM_SlaveTimer_SetConfig+0x80>
 800648e:	2b70      	cmp	r3, #112	; 0x70
 8006490:	d860      	bhi.n	8006554 <TIM_SlaveTimer_SetConfig+0x110>
 8006492:	2b60      	cmp	r3, #96	; 0x60
 8006494:	d054      	beq.n	8006540 <TIM_SlaveTimer_SetConfig+0xfc>
 8006496:	2b60      	cmp	r3, #96	; 0x60
 8006498:	d85c      	bhi.n	8006554 <TIM_SlaveTimer_SetConfig+0x110>
 800649a:	2b50      	cmp	r3, #80	; 0x50
 800649c:	d046      	beq.n	800652c <TIM_SlaveTimer_SetConfig+0xe8>
 800649e:	2b50      	cmp	r3, #80	; 0x50
 80064a0:	d858      	bhi.n	8006554 <TIM_SlaveTimer_SetConfig+0x110>
 80064a2:	2b40      	cmp	r3, #64	; 0x40
 80064a4:	d019      	beq.n	80064da <TIM_SlaveTimer_SetConfig+0x96>
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d854      	bhi.n	8006554 <TIM_SlaveTimer_SetConfig+0x110>
 80064aa:	2b30      	cmp	r3, #48	; 0x30
 80064ac:	d055      	beq.n	800655a <TIM_SlaveTimer_SetConfig+0x116>
 80064ae:	2b30      	cmp	r3, #48	; 0x30
 80064b0:	d850      	bhi.n	8006554 <TIM_SlaveTimer_SetConfig+0x110>
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d051      	beq.n	800655a <TIM_SlaveTimer_SetConfig+0x116>
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d84c      	bhi.n	8006554 <TIM_SlaveTimer_SetConfig+0x110>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d04d      	beq.n	800655a <TIM_SlaveTimer_SetConfig+0x116>
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d04b      	beq.n	800655a <TIM_SlaveTimer_SetConfig+0x116>
 80064c2:	e047      	b.n	8006554 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68d9      	ldr	r1, [r3, #12]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f000 f9d1 	bl	800687a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80064d8:	e040      	b.n	800655c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b05      	cmp	r3, #5
 80064e0:	d101      	bne.n	80064e6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e03b      	b.n	800655e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6a1a      	ldr	r2, [r3, #32]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800650c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	4313      	orrs	r3, r2
 8006518:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
      break;
 800652a:	e017      	b.n	800655c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	6899      	ldr	r1, [r3, #8]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	461a      	mov	r2, r3
 800653a:	f000 f889 	bl	8006650 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800653e:	e00d      	b.n	800655c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	6899      	ldr	r1, [r3, #8]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	461a      	mov	r2, r3
 800654e:	f000 f8eb 	bl	8006728 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006552:	e003      	b.n	800655c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
      break;
 8006558:	e000      	b.n	800655c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800655a:	bf00      	nop
  }

  return status;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f023 0201 	bic.w	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a28      	ldr	r2, [pc, #160]	; (8006634 <TIM_TI1_SetConfig+0xcc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01b      	beq.n	80065ce <TIM_TI1_SetConfig+0x66>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659c:	d017      	beq.n	80065ce <TIM_TI1_SetConfig+0x66>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4a25      	ldr	r2, [pc, #148]	; (8006638 <TIM_TI1_SetConfig+0xd0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <TIM_TI1_SetConfig+0x66>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4a24      	ldr	r2, [pc, #144]	; (800663c <TIM_TI1_SetConfig+0xd4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00f      	beq.n	80065ce <TIM_TI1_SetConfig+0x66>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a23      	ldr	r2, [pc, #140]	; (8006640 <TIM_TI1_SetConfig+0xd8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_TI1_SetConfig+0x66>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4a22      	ldr	r2, [pc, #136]	; (8006644 <TIM_TI1_SetConfig+0xdc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_TI1_SetConfig+0x66>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a21      	ldr	r2, [pc, #132]	; (8006648 <TIM_TI1_SetConfig+0xe0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_TI1_SetConfig+0x66>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a20      	ldr	r2, [pc, #128]	; (800664c <TIM_TI1_SetConfig+0xe4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d101      	bne.n	80065d2 <TIM_TI1_SetConfig+0x6a>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <TIM_TI1_SetConfig+0x6c>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0303 	bic.w	r3, r3, #3
 80065de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e003      	b.n	80065f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f043 0301 	orr.w	r3, r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f023 030a 	bic.w	r3, r3, #10
 800660c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f003 030a 	and.w	r3, r3, #10
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40010000 	.word	0x40010000
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800
 8006640:	40000c00 	.word	0x40000c00
 8006644:	40010400 	.word	0x40010400
 8006648:	40014000 	.word	0x40014000
 800664c:	40001800 	.word	0x40001800

08006650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f023 0201 	bic.w	r2, r3, #1
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800667a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f023 030a 	bic.w	r3, r3, #10
 800668c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b087      	sub	sp, #28
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
 80066ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f023 0210 	bic.w	r2, r3, #16
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	031b      	lsls	r3, r3, #12
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006700:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	621a      	str	r2, [r3, #32]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f023 0210 	bic.w	r2, r3, #16
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006752:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	031b      	lsls	r3, r3, #12
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	bf00      	nop
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f023 0303 	bic.w	r3, r3, #3
 80067b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80067d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800683e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	031b      	lsls	r3, r3, #12
 8006844:	b29b      	uxth	r3, r3
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006852:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	031b      	lsls	r3, r3, #12
 8006858:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	621a      	str	r2, [r3, #32]
}
 800686e:	bf00      	nop
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800687a:	b480      	push	{r7}
 800687c:	b087      	sub	sp, #28
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006894:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	021a      	lsls	r2, r3, #8
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	431a      	orrs	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	609a      	str	r2, [r3, #8]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b087      	sub	sp, #28
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	2201      	movs	r2, #1
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	43db      	mvns	r3, r3
 80068dc:	401a      	ands	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1a      	ldr	r2, [r3, #32]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	fa01 f303 	lsl.w	r3, r1, r3
 80068f2:	431a      	orrs	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	621a      	str	r2, [r3, #32]
}
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006918:	2302      	movs	r3, #2
 800691a:	e05a      	b.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a21      	ldr	r2, [pc, #132]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d022      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006968:	d01d      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d018      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1b      	ldr	r2, [pc, #108]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00e      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d009      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d10c      	bne.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40001800 	.word	0x40001800

080069fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e03f      	b.n	8006a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fc f8b4 	bl	8002b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2224      	movs	r2, #36	; 0x24
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f9cb 	bl	8006ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695a      	ldr	r2, [r3, #20]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b08a      	sub	sp, #40	; 0x28
 8006a9a:	af02      	add	r7, sp, #8
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	603b      	str	r3, [r7, #0]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d17c      	bne.n	8006bb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <HAL_UART_Transmit+0x2c>
 8006abc:	88fb      	ldrh	r3, [r7, #6]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e075      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_UART_Transmit+0x3e>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e06e      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2221      	movs	r2, #33	; 0x21
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aea:	f7fc f99b 	bl	8002e24 <HAL_GetTick>
 8006aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	88fa      	ldrh	r2, [r7, #6]
 8006af4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	88fa      	ldrh	r2, [r7, #6]
 8006afa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b04:	d108      	bne.n	8006b18 <HAL_UART_Transmit+0x82>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d104      	bne.n	8006b18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	e003      	b.n	8006b20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b28:	e02a      	b.n	8006b80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2200      	movs	r2, #0
 8006b32:	2180      	movs	r1, #128	; 0x80
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f8e2 	bl	8006cfe <UART_WaitOnFlagUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e036      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	e007      	b.n	8006b72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1cf      	bne.n	8006b2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	2140      	movs	r1, #64	; 0x40
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f8b2 	bl	8006cfe <UART_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e006      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e000      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bb0:	2302      	movs	r3, #2
  }
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b08a      	sub	sp, #40	; 0x28
 8006bbe:	af02      	add	r7, sp, #8
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	f040 808c 	bne.w	8006cf4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_UART_Receive+0x2e>
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e084      	b.n	8006cf6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_UART_Receive+0x40>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e07d      	b.n	8006cf6 <HAL_UART_Receive+0x13c>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2222      	movs	r2, #34	; 0x22
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c16:	f7fc f905 	bl	8002e24 <HAL_GetTick>
 8006c1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	88fa      	ldrh	r2, [r7, #6]
 8006c26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c30:	d108      	bne.n	8006c44 <HAL_UART_Receive+0x8a>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d104      	bne.n	8006c44 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	e003      	b.n	8006c4c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006c54:	e043      	b.n	8006cde <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2120      	movs	r1, #32
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f84c 	bl	8006cfe <UART_WaitOnFlagUntilTimeout>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e042      	b.n	8006cf6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10c      	bne.n	8006c90 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	3302      	adds	r3, #2
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	e01f      	b.n	8006cd0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c98:	d007      	beq.n	8006caa <HAL_UART_Receive+0xf0>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <HAL_UART_Receive+0xfe>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e008      	b.n	8006cca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1b6      	bne.n	8006c56 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e000      	b.n	8006cf6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006cf4:	2302      	movs	r3, #2
  }
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b090      	sub	sp, #64	; 0x40
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	603b      	str	r3, [r7, #0]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0e:	e050      	b.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d16:	d04c      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d007      	beq.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d1e:	f7fc f881 	bl	8002e24 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d241      	bcs.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d4e:	637a      	str	r2, [r7, #52]	; 0x34
 8006d50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e5      	bne.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3314      	adds	r3, #20
 8006d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	613b      	str	r3, [r7, #16]
   return(result);
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3314      	adds	r3, #20
 8006d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d82:	623a      	str	r2, [r7, #32]
 8006d84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	69f9      	ldr	r1, [r7, #28]
 8006d88:	6a3a      	ldr	r2, [r7, #32]
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e5      	bne.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e00f      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	bf0c      	ite	eq
 8006dc2:	2301      	moveq	r3, #1
 8006dc4:	2300      	movne	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d09f      	beq.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3740      	adds	r7, #64	; 0x40
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	b09f      	sub	sp, #124	; 0x7c
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df2:	68d9      	ldr	r1, [r3, #12]
 8006df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	ea40 0301 	orr.w	r3, r0, r1
 8006dfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e20:	f021 010c 	bic.w	r1, r1, #12
 8006e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3a:	6999      	ldr	r1, [r3, #24]
 8006e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	ea40 0301 	orr.w	r3, r0, r1
 8006e44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4bc5      	ldr	r3, [pc, #788]	; (8007160 <UART_SetConfig+0x384>)
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d004      	beq.n	8006e5a <UART_SetConfig+0x7e>
 8006e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	4bc3      	ldr	r3, [pc, #780]	; (8007164 <UART_SetConfig+0x388>)
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d103      	bne.n	8006e62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e5a:	f7fe fba5 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 8006e5e:	6778      	str	r0, [r7, #116]	; 0x74
 8006e60:	e002      	b.n	8006e68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e62:	f7fe fb8d 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 8006e66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e70:	f040 80b6 	bne.w	8006fe0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e76:	461c      	mov	r4, r3
 8006e78:	f04f 0500 	mov.w	r5, #0
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	462b      	mov	r3, r5
 8006e80:	1891      	adds	r1, r2, r2
 8006e82:	6439      	str	r1, [r7, #64]	; 0x40
 8006e84:	415b      	adcs	r3, r3
 8006e86:	647b      	str	r3, [r7, #68]	; 0x44
 8006e88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e8c:	1912      	adds	r2, r2, r4
 8006e8e:	eb45 0303 	adc.w	r3, r5, r3
 8006e92:	f04f 0000 	mov.w	r0, #0
 8006e96:	f04f 0100 	mov.w	r1, #0
 8006e9a:	00d9      	lsls	r1, r3, #3
 8006e9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ea0:	00d0      	lsls	r0, r2, #3
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	1911      	adds	r1, r2, r4
 8006ea8:	6639      	str	r1, [r7, #96]	; 0x60
 8006eaa:	416b      	adcs	r3, r5
 8006eac:	667b      	str	r3, [r7, #100]	; 0x64
 8006eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	1891      	adds	r1, r2, r2
 8006eba:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ebc:	415b      	adcs	r3, r3
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ec4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ec8:	f7f9 fe78 	bl	8000bbc <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4ba5      	ldr	r3, [pc, #660]	; (8007168 <UART_SetConfig+0x38c>)
 8006ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	011e      	lsls	r6, r3, #4
 8006eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006edc:	461c      	mov	r4, r3
 8006ede:	f04f 0500 	mov.w	r5, #0
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	1891      	adds	r1, r2, r2
 8006ee8:	6339      	str	r1, [r7, #48]	; 0x30
 8006eea:	415b      	adcs	r3, r3
 8006eec:	637b      	str	r3, [r7, #52]	; 0x34
 8006eee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ef2:	1912      	adds	r2, r2, r4
 8006ef4:	eb45 0303 	adc.w	r3, r5, r3
 8006ef8:	f04f 0000 	mov.w	r0, #0
 8006efc:	f04f 0100 	mov.w	r1, #0
 8006f00:	00d9      	lsls	r1, r3, #3
 8006f02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f06:	00d0      	lsls	r0, r2, #3
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	1911      	adds	r1, r2, r4
 8006f0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f10:	416b      	adcs	r3, r5
 8006f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	f04f 0300 	mov.w	r3, #0
 8006f1e:	1891      	adds	r1, r2, r2
 8006f20:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f22:	415b      	adcs	r3, r3
 8006f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006f2e:	f7f9 fe45 	bl	8000bbc <__aeabi_uldivmod>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4b8c      	ldr	r3, [pc, #560]	; (8007168 <UART_SetConfig+0x38c>)
 8006f38:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	2164      	movs	r1, #100	; 0x64
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	3332      	adds	r3, #50	; 0x32
 8006f4a:	4a87      	ldr	r2, [pc, #540]	; (8007168 <UART_SetConfig+0x38c>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f58:	441e      	add	r6, r3
 8006f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f04f 0100 	mov.w	r1, #0
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	1894      	adds	r4, r2, r2
 8006f68:	623c      	str	r4, [r7, #32]
 8006f6a:	415b      	adcs	r3, r3
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f72:	1812      	adds	r2, r2, r0
 8006f74:	eb41 0303 	adc.w	r3, r1, r3
 8006f78:	f04f 0400 	mov.w	r4, #0
 8006f7c:	f04f 0500 	mov.w	r5, #0
 8006f80:	00dd      	lsls	r5, r3, #3
 8006f82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f86:	00d4      	lsls	r4, r2, #3
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	1814      	adds	r4, r2, r0
 8006f8e:	653c      	str	r4, [r7, #80]	; 0x50
 8006f90:	414b      	adcs	r3, r1
 8006f92:	657b      	str	r3, [r7, #84]	; 0x54
 8006f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	1891      	adds	r1, r2, r2
 8006fa0:	61b9      	str	r1, [r7, #24]
 8006fa2:	415b      	adcs	r3, r3
 8006fa4:	61fb      	str	r3, [r7, #28]
 8006fa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006faa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fae:	f7f9 fe05 	bl	8000bbc <__aeabi_uldivmod>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4b6c      	ldr	r3, [pc, #432]	; (8007168 <UART_SetConfig+0x38c>)
 8006fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fbc:	095b      	lsrs	r3, r3, #5
 8006fbe:	2164      	movs	r1, #100	; 0x64
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	3332      	adds	r3, #50	; 0x32
 8006fca:	4a67      	ldr	r2, [pc, #412]	; (8007168 <UART_SetConfig+0x38c>)
 8006fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd0:	095b      	lsrs	r3, r3, #5
 8006fd2:	f003 0207 	and.w	r2, r3, #7
 8006fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4432      	add	r2, r6
 8006fdc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fde:	e0b9      	b.n	8007154 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe2:	461c      	mov	r4, r3
 8006fe4:	f04f 0500 	mov.w	r5, #0
 8006fe8:	4622      	mov	r2, r4
 8006fea:	462b      	mov	r3, r5
 8006fec:	1891      	adds	r1, r2, r2
 8006fee:	6139      	str	r1, [r7, #16]
 8006ff0:	415b      	adcs	r3, r3
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ff8:	1912      	adds	r2, r2, r4
 8006ffa:	eb45 0303 	adc.w	r3, r5, r3
 8006ffe:	f04f 0000 	mov.w	r0, #0
 8007002:	f04f 0100 	mov.w	r1, #0
 8007006:	00d9      	lsls	r1, r3, #3
 8007008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800700c:	00d0      	lsls	r0, r2, #3
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	eb12 0804 	adds.w	r8, r2, r4
 8007016:	eb43 0905 	adc.w	r9, r3, r5
 800701a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	4618      	mov	r0, r3
 8007020:	f04f 0100 	mov.w	r1, #0
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	008b      	lsls	r3, r1, #2
 800702e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007032:	0082      	lsls	r2, r0, #2
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	f7f9 fdc0 	bl	8000bbc <__aeabi_uldivmod>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4b49      	ldr	r3, [pc, #292]	; (8007168 <UART_SetConfig+0x38c>)
 8007042:	fba3 2302 	umull	r2, r3, r3, r2
 8007046:	095b      	lsrs	r3, r3, #5
 8007048:	011e      	lsls	r6, r3, #4
 800704a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800704c:	4618      	mov	r0, r3
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	1894      	adds	r4, r2, r2
 8007058:	60bc      	str	r4, [r7, #8]
 800705a:	415b      	adcs	r3, r3
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007062:	1812      	adds	r2, r2, r0
 8007064:	eb41 0303 	adc.w	r3, r1, r3
 8007068:	f04f 0400 	mov.w	r4, #0
 800706c:	f04f 0500 	mov.w	r5, #0
 8007070:	00dd      	lsls	r5, r3, #3
 8007072:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007076:	00d4      	lsls	r4, r2, #3
 8007078:	4622      	mov	r2, r4
 800707a:	462b      	mov	r3, r5
 800707c:	1814      	adds	r4, r2, r0
 800707e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007080:	414b      	adcs	r3, r1
 8007082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4618      	mov	r0, r3
 800708a:	f04f 0100 	mov.w	r1, #0
 800708e:	f04f 0200 	mov.w	r2, #0
 8007092:	f04f 0300 	mov.w	r3, #0
 8007096:	008b      	lsls	r3, r1, #2
 8007098:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800709c:	0082      	lsls	r2, r0, #2
 800709e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80070a2:	f7f9 fd8b 	bl	8000bbc <__aeabi_uldivmod>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4b2f      	ldr	r3, [pc, #188]	; (8007168 <UART_SetConfig+0x38c>)
 80070ac:	fba3 1302 	umull	r1, r3, r3, r2
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	2164      	movs	r1, #100	; 0x64
 80070b4:	fb01 f303 	mul.w	r3, r1, r3
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	3332      	adds	r3, #50	; 0x32
 80070be:	4a2a      	ldr	r2, [pc, #168]	; (8007168 <UART_SetConfig+0x38c>)
 80070c0:	fba2 2303 	umull	r2, r3, r2, r3
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070ca:	441e      	add	r6, r3
 80070cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ce:	4618      	mov	r0, r3
 80070d0:	f04f 0100 	mov.w	r1, #0
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	1894      	adds	r4, r2, r2
 80070da:	603c      	str	r4, [r7, #0]
 80070dc:	415b      	adcs	r3, r3
 80070de:	607b      	str	r3, [r7, #4]
 80070e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e4:	1812      	adds	r2, r2, r0
 80070e6:	eb41 0303 	adc.w	r3, r1, r3
 80070ea:	f04f 0400 	mov.w	r4, #0
 80070ee:	f04f 0500 	mov.w	r5, #0
 80070f2:	00dd      	lsls	r5, r3, #3
 80070f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070f8:	00d4      	lsls	r4, r2, #3
 80070fa:	4622      	mov	r2, r4
 80070fc:	462b      	mov	r3, r5
 80070fe:	eb12 0a00 	adds.w	sl, r2, r0
 8007102:	eb43 0b01 	adc.w	fp, r3, r1
 8007106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4618      	mov	r0, r3
 800710c:	f04f 0100 	mov.w	r1, #0
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	008b      	lsls	r3, r1, #2
 800711a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800711e:	0082      	lsls	r2, r0, #2
 8007120:	4650      	mov	r0, sl
 8007122:	4659      	mov	r1, fp
 8007124:	f7f9 fd4a 	bl	8000bbc <__aeabi_uldivmod>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4b0e      	ldr	r3, [pc, #56]	; (8007168 <UART_SetConfig+0x38c>)
 800712e:	fba3 1302 	umull	r1, r3, r3, r2
 8007132:	095b      	lsrs	r3, r3, #5
 8007134:	2164      	movs	r1, #100	; 0x64
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	3332      	adds	r3, #50	; 0x32
 8007140:	4a09      	ldr	r2, [pc, #36]	; (8007168 <UART_SetConfig+0x38c>)
 8007142:	fba2 2303 	umull	r2, r3, r2, r3
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	f003 020f 	and.w	r2, r3, #15
 800714c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4432      	add	r2, r6
 8007152:	609a      	str	r2, [r3, #8]
}
 8007154:	bf00      	nop
 8007156:	377c      	adds	r7, #124	; 0x7c
 8007158:	46bd      	mov	sp, r7
 800715a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715e:	bf00      	nop
 8007160:	40011000 	.word	0x40011000
 8007164:	40011400 	.word	0x40011400
 8007168:	51eb851f 	.word	0x51eb851f

0800716c <__errno>:
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <__errno+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000010 	.word	0x20000010

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4d0d      	ldr	r5, [pc, #52]	; (80071b0 <__libc_init_array+0x38>)
 800717c:	4c0d      	ldr	r4, [pc, #52]	; (80071b4 <__libc_init_array+0x3c>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	2600      	movs	r6, #0
 8007184:	42a6      	cmp	r6, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	4d0b      	ldr	r5, [pc, #44]	; (80071b8 <__libc_init_array+0x40>)
 800718a:	4c0c      	ldr	r4, [pc, #48]	; (80071bc <__libc_init_array+0x44>)
 800718c:	f000 fc4e 	bl	8007a2c <_init>
 8007190:	1b64      	subs	r4, r4, r5
 8007192:	10a4      	asrs	r4, r4, #2
 8007194:	2600      	movs	r6, #0
 8007196:	42a6      	cmp	r6, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a0:	4798      	blx	r3
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071aa:	4798      	blx	r3
 80071ac:	3601      	adds	r6, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	08007abc 	.word	0x08007abc
 80071b4:	08007abc 	.word	0x08007abc
 80071b8:	08007abc 	.word	0x08007abc
 80071bc:	08007ac0 	.word	0x08007ac0

080071c0 <memset>:
 80071c0:	4402      	add	r2, r0
 80071c2:	4603      	mov	r3, r0
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d100      	bne.n	80071ca <memset+0xa>
 80071c8:	4770      	bx	lr
 80071ca:	f803 1b01 	strb.w	r1, [r3], #1
 80071ce:	e7f9      	b.n	80071c4 <memset+0x4>

080071d0 <siprintf>:
 80071d0:	b40e      	push	{r1, r2, r3}
 80071d2:	b500      	push	{lr}
 80071d4:	b09c      	sub	sp, #112	; 0x70
 80071d6:	ab1d      	add	r3, sp, #116	; 0x74
 80071d8:	9002      	str	r0, [sp, #8]
 80071da:	9006      	str	r0, [sp, #24]
 80071dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071e0:	4809      	ldr	r0, [pc, #36]	; (8007208 <siprintf+0x38>)
 80071e2:	9107      	str	r1, [sp, #28]
 80071e4:	9104      	str	r1, [sp, #16]
 80071e6:	4909      	ldr	r1, [pc, #36]	; (800720c <siprintf+0x3c>)
 80071e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ec:	9105      	str	r1, [sp, #20]
 80071ee:	6800      	ldr	r0, [r0, #0]
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	a902      	add	r1, sp, #8
 80071f4:	f000 f868 	bl	80072c8 <_svfiprintf_r>
 80071f8:	9b02      	ldr	r3, [sp, #8]
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	b01c      	add	sp, #112	; 0x70
 8007200:	f85d eb04 	ldr.w	lr, [sp], #4
 8007204:	b003      	add	sp, #12
 8007206:	4770      	bx	lr
 8007208:	20000010 	.word	0x20000010
 800720c:	ffff0208 	.word	0xffff0208

08007210 <__ssputs_r>:
 8007210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	688e      	ldr	r6, [r1, #8]
 8007216:	429e      	cmp	r6, r3
 8007218:	4682      	mov	sl, r0
 800721a:	460c      	mov	r4, r1
 800721c:	4690      	mov	r8, r2
 800721e:	461f      	mov	r7, r3
 8007220:	d838      	bhi.n	8007294 <__ssputs_r+0x84>
 8007222:	898a      	ldrh	r2, [r1, #12]
 8007224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007228:	d032      	beq.n	8007290 <__ssputs_r+0x80>
 800722a:	6825      	ldr	r5, [r4, #0]
 800722c:	6909      	ldr	r1, [r1, #16]
 800722e:	eba5 0901 	sub.w	r9, r5, r1
 8007232:	6965      	ldr	r5, [r4, #20]
 8007234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800723c:	3301      	adds	r3, #1
 800723e:	444b      	add	r3, r9
 8007240:	106d      	asrs	r5, r5, #1
 8007242:	429d      	cmp	r5, r3
 8007244:	bf38      	it	cc
 8007246:	461d      	movcc	r5, r3
 8007248:	0553      	lsls	r3, r2, #21
 800724a:	d531      	bpl.n	80072b0 <__ssputs_r+0xa0>
 800724c:	4629      	mov	r1, r5
 800724e:	f000 fb47 	bl	80078e0 <_malloc_r>
 8007252:	4606      	mov	r6, r0
 8007254:	b950      	cbnz	r0, 800726c <__ssputs_r+0x5c>
 8007256:	230c      	movs	r3, #12
 8007258:	f8ca 3000 	str.w	r3, [sl]
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726c:	6921      	ldr	r1, [r4, #16]
 800726e:	464a      	mov	r2, r9
 8007270:	f000 fabe 	bl	80077f0 <memcpy>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800727a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	6126      	str	r6, [r4, #16]
 8007282:	6165      	str	r5, [r4, #20]
 8007284:	444e      	add	r6, r9
 8007286:	eba5 0509 	sub.w	r5, r5, r9
 800728a:	6026      	str	r6, [r4, #0]
 800728c:	60a5      	str	r5, [r4, #8]
 800728e:	463e      	mov	r6, r7
 8007290:	42be      	cmp	r6, r7
 8007292:	d900      	bls.n	8007296 <__ssputs_r+0x86>
 8007294:	463e      	mov	r6, r7
 8007296:	4632      	mov	r2, r6
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	4641      	mov	r1, r8
 800729c:	f000 fab6 	bl	800780c <memmove>
 80072a0:	68a3      	ldr	r3, [r4, #8]
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	1b9b      	subs	r3, r3, r6
 80072a6:	4432      	add	r2, r6
 80072a8:	60a3      	str	r3, [r4, #8]
 80072aa:	6022      	str	r2, [r4, #0]
 80072ac:	2000      	movs	r0, #0
 80072ae:	e7db      	b.n	8007268 <__ssputs_r+0x58>
 80072b0:	462a      	mov	r2, r5
 80072b2:	f000 fb6f 	bl	8007994 <_realloc_r>
 80072b6:	4606      	mov	r6, r0
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d1e1      	bne.n	8007280 <__ssputs_r+0x70>
 80072bc:	6921      	ldr	r1, [r4, #16]
 80072be:	4650      	mov	r0, sl
 80072c0:	f000 fabe 	bl	8007840 <_free_r>
 80072c4:	e7c7      	b.n	8007256 <__ssputs_r+0x46>
	...

080072c8 <_svfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	4698      	mov	r8, r3
 80072ce:	898b      	ldrh	r3, [r1, #12]
 80072d0:	061b      	lsls	r3, r3, #24
 80072d2:	b09d      	sub	sp, #116	; 0x74
 80072d4:	4607      	mov	r7, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	4614      	mov	r4, r2
 80072da:	d50e      	bpl.n	80072fa <_svfiprintf_r+0x32>
 80072dc:	690b      	ldr	r3, [r1, #16]
 80072de:	b963      	cbnz	r3, 80072fa <_svfiprintf_r+0x32>
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	f000 fafd 	bl	80078e0 <_malloc_r>
 80072e6:	6028      	str	r0, [r5, #0]
 80072e8:	6128      	str	r0, [r5, #16]
 80072ea:	b920      	cbnz	r0, 80072f6 <_svfiprintf_r+0x2e>
 80072ec:	230c      	movs	r3, #12
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	e0d1      	b.n	800749a <_svfiprintf_r+0x1d2>
 80072f6:	2340      	movs	r3, #64	; 0x40
 80072f8:	616b      	str	r3, [r5, #20]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9309      	str	r3, [sp, #36]	; 0x24
 80072fe:	2320      	movs	r3, #32
 8007300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007304:	f8cd 800c 	str.w	r8, [sp, #12]
 8007308:	2330      	movs	r3, #48	; 0x30
 800730a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074b4 <_svfiprintf_r+0x1ec>
 800730e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007312:	f04f 0901 	mov.w	r9, #1
 8007316:	4623      	mov	r3, r4
 8007318:	469a      	mov	sl, r3
 800731a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800731e:	b10a      	cbz	r2, 8007324 <_svfiprintf_r+0x5c>
 8007320:	2a25      	cmp	r2, #37	; 0x25
 8007322:	d1f9      	bne.n	8007318 <_svfiprintf_r+0x50>
 8007324:	ebba 0b04 	subs.w	fp, sl, r4
 8007328:	d00b      	beq.n	8007342 <_svfiprintf_r+0x7a>
 800732a:	465b      	mov	r3, fp
 800732c:	4622      	mov	r2, r4
 800732e:	4629      	mov	r1, r5
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff ff6d 	bl	8007210 <__ssputs_r>
 8007336:	3001      	adds	r0, #1
 8007338:	f000 80aa 	beq.w	8007490 <_svfiprintf_r+0x1c8>
 800733c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800733e:	445a      	add	r2, fp
 8007340:	9209      	str	r2, [sp, #36]	; 0x24
 8007342:	f89a 3000 	ldrb.w	r3, [sl]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 80a2 	beq.w	8007490 <_svfiprintf_r+0x1c8>
 800734c:	2300      	movs	r3, #0
 800734e:	f04f 32ff 	mov.w	r2, #4294967295
 8007352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007356:	f10a 0a01 	add.w	sl, sl, #1
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007362:	931a      	str	r3, [sp, #104]	; 0x68
 8007364:	4654      	mov	r4, sl
 8007366:	2205      	movs	r2, #5
 8007368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736c:	4851      	ldr	r0, [pc, #324]	; (80074b4 <_svfiprintf_r+0x1ec>)
 800736e:	f7f8 ff2f 	bl	80001d0 <memchr>
 8007372:	9a04      	ldr	r2, [sp, #16]
 8007374:	b9d8      	cbnz	r0, 80073ae <_svfiprintf_r+0xe6>
 8007376:	06d0      	lsls	r0, r2, #27
 8007378:	bf44      	itt	mi
 800737a:	2320      	movmi	r3, #32
 800737c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007380:	0711      	lsls	r1, r2, #28
 8007382:	bf44      	itt	mi
 8007384:	232b      	movmi	r3, #43	; 0x2b
 8007386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738a:	f89a 3000 	ldrb.w	r3, [sl]
 800738e:	2b2a      	cmp	r3, #42	; 0x2a
 8007390:	d015      	beq.n	80073be <_svfiprintf_r+0xf6>
 8007392:	9a07      	ldr	r2, [sp, #28]
 8007394:	4654      	mov	r4, sl
 8007396:	2000      	movs	r0, #0
 8007398:	f04f 0c0a 	mov.w	ip, #10
 800739c:	4621      	mov	r1, r4
 800739e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a2:	3b30      	subs	r3, #48	; 0x30
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d94e      	bls.n	8007446 <_svfiprintf_r+0x17e>
 80073a8:	b1b0      	cbz	r0, 80073d8 <_svfiprintf_r+0x110>
 80073aa:	9207      	str	r2, [sp, #28]
 80073ac:	e014      	b.n	80073d8 <_svfiprintf_r+0x110>
 80073ae:	eba0 0308 	sub.w	r3, r0, r8
 80073b2:	fa09 f303 	lsl.w	r3, r9, r3
 80073b6:	4313      	orrs	r3, r2
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	46a2      	mov	sl, r4
 80073bc:	e7d2      	b.n	8007364 <_svfiprintf_r+0x9c>
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	1d19      	adds	r1, r3, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	9103      	str	r1, [sp, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfbb      	ittet	lt
 80073ca:	425b      	neglt	r3, r3
 80073cc:	f042 0202 	orrlt.w	r2, r2, #2
 80073d0:	9307      	strge	r3, [sp, #28]
 80073d2:	9307      	strlt	r3, [sp, #28]
 80073d4:	bfb8      	it	lt
 80073d6:	9204      	strlt	r2, [sp, #16]
 80073d8:	7823      	ldrb	r3, [r4, #0]
 80073da:	2b2e      	cmp	r3, #46	; 0x2e
 80073dc:	d10c      	bne.n	80073f8 <_svfiprintf_r+0x130>
 80073de:	7863      	ldrb	r3, [r4, #1]
 80073e0:	2b2a      	cmp	r3, #42	; 0x2a
 80073e2:	d135      	bne.n	8007450 <_svfiprintf_r+0x188>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	1d1a      	adds	r2, r3, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	9203      	str	r2, [sp, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfb8      	it	lt
 80073f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80073f4:	3402      	adds	r4, #2
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074c4 <_svfiprintf_r+0x1fc>
 80073fc:	7821      	ldrb	r1, [r4, #0]
 80073fe:	2203      	movs	r2, #3
 8007400:	4650      	mov	r0, sl
 8007402:	f7f8 fee5 	bl	80001d0 <memchr>
 8007406:	b140      	cbz	r0, 800741a <_svfiprintf_r+0x152>
 8007408:	2340      	movs	r3, #64	; 0x40
 800740a:	eba0 000a 	sub.w	r0, r0, sl
 800740e:	fa03 f000 	lsl.w	r0, r3, r0
 8007412:	9b04      	ldr	r3, [sp, #16]
 8007414:	4303      	orrs	r3, r0
 8007416:	3401      	adds	r4, #1
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741e:	4826      	ldr	r0, [pc, #152]	; (80074b8 <_svfiprintf_r+0x1f0>)
 8007420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007424:	2206      	movs	r2, #6
 8007426:	f7f8 fed3 	bl	80001d0 <memchr>
 800742a:	2800      	cmp	r0, #0
 800742c:	d038      	beq.n	80074a0 <_svfiprintf_r+0x1d8>
 800742e:	4b23      	ldr	r3, [pc, #140]	; (80074bc <_svfiprintf_r+0x1f4>)
 8007430:	bb1b      	cbnz	r3, 800747a <_svfiprintf_r+0x1b2>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	3307      	adds	r3, #7
 8007436:	f023 0307 	bic.w	r3, r3, #7
 800743a:	3308      	adds	r3, #8
 800743c:	9303      	str	r3, [sp, #12]
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	4433      	add	r3, r6
 8007442:	9309      	str	r3, [sp, #36]	; 0x24
 8007444:	e767      	b.n	8007316 <_svfiprintf_r+0x4e>
 8007446:	fb0c 3202 	mla	r2, ip, r2, r3
 800744a:	460c      	mov	r4, r1
 800744c:	2001      	movs	r0, #1
 800744e:	e7a5      	b.n	800739c <_svfiprintf_r+0xd4>
 8007450:	2300      	movs	r3, #0
 8007452:	3401      	adds	r4, #1
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	4619      	mov	r1, r3
 8007458:	f04f 0c0a 	mov.w	ip, #10
 800745c:	4620      	mov	r0, r4
 800745e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007462:	3a30      	subs	r2, #48	; 0x30
 8007464:	2a09      	cmp	r2, #9
 8007466:	d903      	bls.n	8007470 <_svfiprintf_r+0x1a8>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0c5      	beq.n	80073f8 <_svfiprintf_r+0x130>
 800746c:	9105      	str	r1, [sp, #20]
 800746e:	e7c3      	b.n	80073f8 <_svfiprintf_r+0x130>
 8007470:	fb0c 2101 	mla	r1, ip, r1, r2
 8007474:	4604      	mov	r4, r0
 8007476:	2301      	movs	r3, #1
 8007478:	e7f0      	b.n	800745c <_svfiprintf_r+0x194>
 800747a:	ab03      	add	r3, sp, #12
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	462a      	mov	r2, r5
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <_svfiprintf_r+0x1f8>)
 8007482:	a904      	add	r1, sp, #16
 8007484:	4638      	mov	r0, r7
 8007486:	f3af 8000 	nop.w
 800748a:	1c42      	adds	r2, r0, #1
 800748c:	4606      	mov	r6, r0
 800748e:	d1d6      	bne.n	800743e <_svfiprintf_r+0x176>
 8007490:	89ab      	ldrh	r3, [r5, #12]
 8007492:	065b      	lsls	r3, r3, #25
 8007494:	f53f af2c 	bmi.w	80072f0 <_svfiprintf_r+0x28>
 8007498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800749a:	b01d      	add	sp, #116	; 0x74
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	ab03      	add	r3, sp, #12
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	462a      	mov	r2, r5
 80074a6:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <_svfiprintf_r+0x1f8>)
 80074a8:	a904      	add	r1, sp, #16
 80074aa:	4638      	mov	r0, r7
 80074ac:	f000 f87a 	bl	80075a4 <_printf_i>
 80074b0:	e7eb      	b.n	800748a <_svfiprintf_r+0x1c2>
 80074b2:	bf00      	nop
 80074b4:	08007a80 	.word	0x08007a80
 80074b8:	08007a8a 	.word	0x08007a8a
 80074bc:	00000000 	.word	0x00000000
 80074c0:	08007211 	.word	0x08007211
 80074c4:	08007a86 	.word	0x08007a86

080074c8 <_printf_common>:
 80074c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	4616      	mov	r6, r2
 80074ce:	4699      	mov	r9, r3
 80074d0:	688a      	ldr	r2, [r1, #8]
 80074d2:	690b      	ldr	r3, [r1, #16]
 80074d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074d8:	4293      	cmp	r3, r2
 80074da:	bfb8      	it	lt
 80074dc:	4613      	movlt	r3, r2
 80074de:	6033      	str	r3, [r6, #0]
 80074e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074e4:	4607      	mov	r7, r0
 80074e6:	460c      	mov	r4, r1
 80074e8:	b10a      	cbz	r2, 80074ee <_printf_common+0x26>
 80074ea:	3301      	adds	r3, #1
 80074ec:	6033      	str	r3, [r6, #0]
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	0699      	lsls	r1, r3, #26
 80074f2:	bf42      	ittt	mi
 80074f4:	6833      	ldrmi	r3, [r6, #0]
 80074f6:	3302      	addmi	r3, #2
 80074f8:	6033      	strmi	r3, [r6, #0]
 80074fa:	6825      	ldr	r5, [r4, #0]
 80074fc:	f015 0506 	ands.w	r5, r5, #6
 8007500:	d106      	bne.n	8007510 <_printf_common+0x48>
 8007502:	f104 0a19 	add.w	sl, r4, #25
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	6832      	ldr	r2, [r6, #0]
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	42ab      	cmp	r3, r5
 800750e:	dc26      	bgt.n	800755e <_printf_common+0x96>
 8007510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007514:	1e13      	subs	r3, r2, #0
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	bf18      	it	ne
 800751a:	2301      	movne	r3, #1
 800751c:	0692      	lsls	r2, r2, #26
 800751e:	d42b      	bmi.n	8007578 <_printf_common+0xb0>
 8007520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007524:	4649      	mov	r1, r9
 8007526:	4638      	mov	r0, r7
 8007528:	47c0      	blx	r8
 800752a:	3001      	adds	r0, #1
 800752c:	d01e      	beq.n	800756c <_printf_common+0xa4>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	68e5      	ldr	r5, [r4, #12]
 8007532:	6832      	ldr	r2, [r6, #0]
 8007534:	f003 0306 	and.w	r3, r3, #6
 8007538:	2b04      	cmp	r3, #4
 800753a:	bf08      	it	eq
 800753c:	1aad      	subeq	r5, r5, r2
 800753e:	68a3      	ldr	r3, [r4, #8]
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	bf0c      	ite	eq
 8007544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007548:	2500      	movne	r5, #0
 800754a:	4293      	cmp	r3, r2
 800754c:	bfc4      	itt	gt
 800754e:	1a9b      	subgt	r3, r3, r2
 8007550:	18ed      	addgt	r5, r5, r3
 8007552:	2600      	movs	r6, #0
 8007554:	341a      	adds	r4, #26
 8007556:	42b5      	cmp	r5, r6
 8007558:	d11a      	bne.n	8007590 <_printf_common+0xc8>
 800755a:	2000      	movs	r0, #0
 800755c:	e008      	b.n	8007570 <_printf_common+0xa8>
 800755e:	2301      	movs	r3, #1
 8007560:	4652      	mov	r2, sl
 8007562:	4649      	mov	r1, r9
 8007564:	4638      	mov	r0, r7
 8007566:	47c0      	blx	r8
 8007568:	3001      	adds	r0, #1
 800756a:	d103      	bne.n	8007574 <_printf_common+0xac>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007574:	3501      	adds	r5, #1
 8007576:	e7c6      	b.n	8007506 <_printf_common+0x3e>
 8007578:	18e1      	adds	r1, r4, r3
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	2030      	movs	r0, #48	; 0x30
 800757e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007582:	4422      	add	r2, r4
 8007584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800758c:	3302      	adds	r3, #2
 800758e:	e7c7      	b.n	8007520 <_printf_common+0x58>
 8007590:	2301      	movs	r3, #1
 8007592:	4622      	mov	r2, r4
 8007594:	4649      	mov	r1, r9
 8007596:	4638      	mov	r0, r7
 8007598:	47c0      	blx	r8
 800759a:	3001      	adds	r0, #1
 800759c:	d0e6      	beq.n	800756c <_printf_common+0xa4>
 800759e:	3601      	adds	r6, #1
 80075a0:	e7d9      	b.n	8007556 <_printf_common+0x8e>
	...

080075a4 <_printf_i>:
 80075a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	460c      	mov	r4, r1
 80075aa:	4691      	mov	r9, r2
 80075ac:	7e27      	ldrb	r7, [r4, #24]
 80075ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075b0:	2f78      	cmp	r7, #120	; 0x78
 80075b2:	4680      	mov	r8, r0
 80075b4:	469a      	mov	sl, r3
 80075b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075ba:	d807      	bhi.n	80075cc <_printf_i+0x28>
 80075bc:	2f62      	cmp	r7, #98	; 0x62
 80075be:	d80a      	bhi.n	80075d6 <_printf_i+0x32>
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	f000 80d8 	beq.w	8007776 <_printf_i+0x1d2>
 80075c6:	2f58      	cmp	r7, #88	; 0x58
 80075c8:	f000 80a3 	beq.w	8007712 <_printf_i+0x16e>
 80075cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075d4:	e03a      	b.n	800764c <_printf_i+0xa8>
 80075d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075da:	2b15      	cmp	r3, #21
 80075dc:	d8f6      	bhi.n	80075cc <_printf_i+0x28>
 80075de:	a001      	add	r0, pc, #4	; (adr r0, 80075e4 <_printf_i+0x40>)
 80075e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	08007651 	.word	0x08007651
 80075ec:	080075cd 	.word	0x080075cd
 80075f0:	080075cd 	.word	0x080075cd
 80075f4:	080075cd 	.word	0x080075cd
 80075f8:	080075cd 	.word	0x080075cd
 80075fc:	08007651 	.word	0x08007651
 8007600:	080075cd 	.word	0x080075cd
 8007604:	080075cd 	.word	0x080075cd
 8007608:	080075cd 	.word	0x080075cd
 800760c:	080075cd 	.word	0x080075cd
 8007610:	0800775d 	.word	0x0800775d
 8007614:	08007681 	.word	0x08007681
 8007618:	0800773f 	.word	0x0800773f
 800761c:	080075cd 	.word	0x080075cd
 8007620:	080075cd 	.word	0x080075cd
 8007624:	0800777f 	.word	0x0800777f
 8007628:	080075cd 	.word	0x080075cd
 800762c:	08007681 	.word	0x08007681
 8007630:	080075cd 	.word	0x080075cd
 8007634:	080075cd 	.word	0x080075cd
 8007638:	08007747 	.word	0x08007747
 800763c:	680b      	ldr	r3, [r1, #0]
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	600a      	str	r2, [r1, #0]
 8007644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800764c:	2301      	movs	r3, #1
 800764e:	e0a3      	b.n	8007798 <_printf_i+0x1f4>
 8007650:	6825      	ldr	r5, [r4, #0]
 8007652:	6808      	ldr	r0, [r1, #0]
 8007654:	062e      	lsls	r6, r5, #24
 8007656:	f100 0304 	add.w	r3, r0, #4
 800765a:	d50a      	bpl.n	8007672 <_printf_i+0xce>
 800765c:	6805      	ldr	r5, [r0, #0]
 800765e:	600b      	str	r3, [r1, #0]
 8007660:	2d00      	cmp	r5, #0
 8007662:	da03      	bge.n	800766c <_printf_i+0xc8>
 8007664:	232d      	movs	r3, #45	; 0x2d
 8007666:	426d      	negs	r5, r5
 8007668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800766c:	485e      	ldr	r0, [pc, #376]	; (80077e8 <_printf_i+0x244>)
 800766e:	230a      	movs	r3, #10
 8007670:	e019      	b.n	80076a6 <_printf_i+0x102>
 8007672:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007676:	6805      	ldr	r5, [r0, #0]
 8007678:	600b      	str	r3, [r1, #0]
 800767a:	bf18      	it	ne
 800767c:	b22d      	sxthne	r5, r5
 800767e:	e7ef      	b.n	8007660 <_printf_i+0xbc>
 8007680:	680b      	ldr	r3, [r1, #0]
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	1d18      	adds	r0, r3, #4
 8007686:	6008      	str	r0, [r1, #0]
 8007688:	0628      	lsls	r0, r5, #24
 800768a:	d501      	bpl.n	8007690 <_printf_i+0xec>
 800768c:	681d      	ldr	r5, [r3, #0]
 800768e:	e002      	b.n	8007696 <_printf_i+0xf2>
 8007690:	0669      	lsls	r1, r5, #25
 8007692:	d5fb      	bpl.n	800768c <_printf_i+0xe8>
 8007694:	881d      	ldrh	r5, [r3, #0]
 8007696:	4854      	ldr	r0, [pc, #336]	; (80077e8 <_printf_i+0x244>)
 8007698:	2f6f      	cmp	r7, #111	; 0x6f
 800769a:	bf0c      	ite	eq
 800769c:	2308      	moveq	r3, #8
 800769e:	230a      	movne	r3, #10
 80076a0:	2100      	movs	r1, #0
 80076a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076a6:	6866      	ldr	r6, [r4, #4]
 80076a8:	60a6      	str	r6, [r4, #8]
 80076aa:	2e00      	cmp	r6, #0
 80076ac:	bfa2      	ittt	ge
 80076ae:	6821      	ldrge	r1, [r4, #0]
 80076b0:	f021 0104 	bicge.w	r1, r1, #4
 80076b4:	6021      	strge	r1, [r4, #0]
 80076b6:	b90d      	cbnz	r5, 80076bc <_printf_i+0x118>
 80076b8:	2e00      	cmp	r6, #0
 80076ba:	d04d      	beq.n	8007758 <_printf_i+0x1b4>
 80076bc:	4616      	mov	r6, r2
 80076be:	fbb5 f1f3 	udiv	r1, r5, r3
 80076c2:	fb03 5711 	mls	r7, r3, r1, r5
 80076c6:	5dc7      	ldrb	r7, [r0, r7]
 80076c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076cc:	462f      	mov	r7, r5
 80076ce:	42bb      	cmp	r3, r7
 80076d0:	460d      	mov	r5, r1
 80076d2:	d9f4      	bls.n	80076be <_printf_i+0x11a>
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d10b      	bne.n	80076f0 <_printf_i+0x14c>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	07df      	lsls	r7, r3, #31
 80076dc:	d508      	bpl.n	80076f0 <_printf_i+0x14c>
 80076de:	6923      	ldr	r3, [r4, #16]
 80076e0:	6861      	ldr	r1, [r4, #4]
 80076e2:	4299      	cmp	r1, r3
 80076e4:	bfde      	ittt	le
 80076e6:	2330      	movle	r3, #48	; 0x30
 80076e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076f0:	1b92      	subs	r2, r2, r6
 80076f2:	6122      	str	r2, [r4, #16]
 80076f4:	f8cd a000 	str.w	sl, [sp]
 80076f8:	464b      	mov	r3, r9
 80076fa:	aa03      	add	r2, sp, #12
 80076fc:	4621      	mov	r1, r4
 80076fe:	4640      	mov	r0, r8
 8007700:	f7ff fee2 	bl	80074c8 <_printf_common>
 8007704:	3001      	adds	r0, #1
 8007706:	d14c      	bne.n	80077a2 <_printf_i+0x1fe>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	b004      	add	sp, #16
 800770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007712:	4835      	ldr	r0, [pc, #212]	; (80077e8 <_printf_i+0x244>)
 8007714:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	680e      	ldr	r6, [r1, #0]
 800771c:	061f      	lsls	r7, r3, #24
 800771e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007722:	600e      	str	r6, [r1, #0]
 8007724:	d514      	bpl.n	8007750 <_printf_i+0x1ac>
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	bf44      	itt	mi
 800772a:	f043 0320 	orrmi.w	r3, r3, #32
 800772e:	6023      	strmi	r3, [r4, #0]
 8007730:	b91d      	cbnz	r5, 800773a <_printf_i+0x196>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	f023 0320 	bic.w	r3, r3, #32
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	2310      	movs	r3, #16
 800773c:	e7b0      	b.n	80076a0 <_printf_i+0xfc>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	f043 0320 	orr.w	r3, r3, #32
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	2378      	movs	r3, #120	; 0x78
 8007748:	4828      	ldr	r0, [pc, #160]	; (80077ec <_printf_i+0x248>)
 800774a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800774e:	e7e3      	b.n	8007718 <_printf_i+0x174>
 8007750:	065e      	lsls	r6, r3, #25
 8007752:	bf48      	it	mi
 8007754:	b2ad      	uxthmi	r5, r5
 8007756:	e7e6      	b.n	8007726 <_printf_i+0x182>
 8007758:	4616      	mov	r6, r2
 800775a:	e7bb      	b.n	80076d4 <_printf_i+0x130>
 800775c:	680b      	ldr	r3, [r1, #0]
 800775e:	6826      	ldr	r6, [r4, #0]
 8007760:	6960      	ldr	r0, [r4, #20]
 8007762:	1d1d      	adds	r5, r3, #4
 8007764:	600d      	str	r5, [r1, #0]
 8007766:	0635      	lsls	r5, r6, #24
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	d501      	bpl.n	8007770 <_printf_i+0x1cc>
 800776c:	6018      	str	r0, [r3, #0]
 800776e:	e002      	b.n	8007776 <_printf_i+0x1d2>
 8007770:	0671      	lsls	r1, r6, #25
 8007772:	d5fb      	bpl.n	800776c <_printf_i+0x1c8>
 8007774:	8018      	strh	r0, [r3, #0]
 8007776:	2300      	movs	r3, #0
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	4616      	mov	r6, r2
 800777c:	e7ba      	b.n	80076f4 <_printf_i+0x150>
 800777e:	680b      	ldr	r3, [r1, #0]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	600a      	str	r2, [r1, #0]
 8007784:	681e      	ldr	r6, [r3, #0]
 8007786:	6862      	ldr	r2, [r4, #4]
 8007788:	2100      	movs	r1, #0
 800778a:	4630      	mov	r0, r6
 800778c:	f7f8 fd20 	bl	80001d0 <memchr>
 8007790:	b108      	cbz	r0, 8007796 <_printf_i+0x1f2>
 8007792:	1b80      	subs	r0, r0, r6
 8007794:	6060      	str	r0, [r4, #4]
 8007796:	6863      	ldr	r3, [r4, #4]
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	2300      	movs	r3, #0
 800779c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a0:	e7a8      	b.n	80076f4 <_printf_i+0x150>
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	4632      	mov	r2, r6
 80077a6:	4649      	mov	r1, r9
 80077a8:	4640      	mov	r0, r8
 80077aa:	47d0      	blx	sl
 80077ac:	3001      	adds	r0, #1
 80077ae:	d0ab      	beq.n	8007708 <_printf_i+0x164>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	079b      	lsls	r3, r3, #30
 80077b4:	d413      	bmi.n	80077de <_printf_i+0x23a>
 80077b6:	68e0      	ldr	r0, [r4, #12]
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	4298      	cmp	r0, r3
 80077bc:	bfb8      	it	lt
 80077be:	4618      	movlt	r0, r3
 80077c0:	e7a4      	b.n	800770c <_printf_i+0x168>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4632      	mov	r2, r6
 80077c6:	4649      	mov	r1, r9
 80077c8:	4640      	mov	r0, r8
 80077ca:	47d0      	blx	sl
 80077cc:	3001      	adds	r0, #1
 80077ce:	d09b      	beq.n	8007708 <_printf_i+0x164>
 80077d0:	3501      	adds	r5, #1
 80077d2:	68e3      	ldr	r3, [r4, #12]
 80077d4:	9903      	ldr	r1, [sp, #12]
 80077d6:	1a5b      	subs	r3, r3, r1
 80077d8:	42ab      	cmp	r3, r5
 80077da:	dcf2      	bgt.n	80077c2 <_printf_i+0x21e>
 80077dc:	e7eb      	b.n	80077b6 <_printf_i+0x212>
 80077de:	2500      	movs	r5, #0
 80077e0:	f104 0619 	add.w	r6, r4, #25
 80077e4:	e7f5      	b.n	80077d2 <_printf_i+0x22e>
 80077e6:	bf00      	nop
 80077e8:	08007a91 	.word	0x08007a91
 80077ec:	08007aa2 	.word	0x08007aa2

080077f0 <memcpy>:
 80077f0:	440a      	add	r2, r1
 80077f2:	4291      	cmp	r1, r2
 80077f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077f8:	d100      	bne.n	80077fc <memcpy+0xc>
 80077fa:	4770      	bx	lr
 80077fc:	b510      	push	{r4, lr}
 80077fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007806:	4291      	cmp	r1, r2
 8007808:	d1f9      	bne.n	80077fe <memcpy+0xe>
 800780a:	bd10      	pop	{r4, pc}

0800780c <memmove>:
 800780c:	4288      	cmp	r0, r1
 800780e:	b510      	push	{r4, lr}
 8007810:	eb01 0402 	add.w	r4, r1, r2
 8007814:	d902      	bls.n	800781c <memmove+0x10>
 8007816:	4284      	cmp	r4, r0
 8007818:	4623      	mov	r3, r4
 800781a:	d807      	bhi.n	800782c <memmove+0x20>
 800781c:	1e43      	subs	r3, r0, #1
 800781e:	42a1      	cmp	r1, r4
 8007820:	d008      	beq.n	8007834 <memmove+0x28>
 8007822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800782a:	e7f8      	b.n	800781e <memmove+0x12>
 800782c:	4402      	add	r2, r0
 800782e:	4601      	mov	r1, r0
 8007830:	428a      	cmp	r2, r1
 8007832:	d100      	bne.n	8007836 <memmove+0x2a>
 8007834:	bd10      	pop	{r4, pc}
 8007836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800783a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800783e:	e7f7      	b.n	8007830 <memmove+0x24>

08007840 <_free_r>:
 8007840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007842:	2900      	cmp	r1, #0
 8007844:	d048      	beq.n	80078d8 <_free_r+0x98>
 8007846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784a:	9001      	str	r0, [sp, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f1a1 0404 	sub.w	r4, r1, #4
 8007852:	bfb8      	it	lt
 8007854:	18e4      	addlt	r4, r4, r3
 8007856:	f000 f8d3 	bl	8007a00 <__malloc_lock>
 800785a:	4a20      	ldr	r2, [pc, #128]	; (80078dc <_free_r+0x9c>)
 800785c:	9801      	ldr	r0, [sp, #4]
 800785e:	6813      	ldr	r3, [r2, #0]
 8007860:	4615      	mov	r5, r2
 8007862:	b933      	cbnz	r3, 8007872 <_free_r+0x32>
 8007864:	6063      	str	r3, [r4, #4]
 8007866:	6014      	str	r4, [r2, #0]
 8007868:	b003      	add	sp, #12
 800786a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800786e:	f000 b8cd 	b.w	8007a0c <__malloc_unlock>
 8007872:	42a3      	cmp	r3, r4
 8007874:	d90b      	bls.n	800788e <_free_r+0x4e>
 8007876:	6821      	ldr	r1, [r4, #0]
 8007878:	1862      	adds	r2, r4, r1
 800787a:	4293      	cmp	r3, r2
 800787c:	bf04      	itt	eq
 800787e:	681a      	ldreq	r2, [r3, #0]
 8007880:	685b      	ldreq	r3, [r3, #4]
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	bf04      	itt	eq
 8007886:	1852      	addeq	r2, r2, r1
 8007888:	6022      	streq	r2, [r4, #0]
 800788a:	602c      	str	r4, [r5, #0]
 800788c:	e7ec      	b.n	8007868 <_free_r+0x28>
 800788e:	461a      	mov	r2, r3
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	b10b      	cbz	r3, 8007898 <_free_r+0x58>
 8007894:	42a3      	cmp	r3, r4
 8007896:	d9fa      	bls.n	800788e <_free_r+0x4e>
 8007898:	6811      	ldr	r1, [r2, #0]
 800789a:	1855      	adds	r5, r2, r1
 800789c:	42a5      	cmp	r5, r4
 800789e:	d10b      	bne.n	80078b8 <_free_r+0x78>
 80078a0:	6824      	ldr	r4, [r4, #0]
 80078a2:	4421      	add	r1, r4
 80078a4:	1854      	adds	r4, r2, r1
 80078a6:	42a3      	cmp	r3, r4
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	d1dd      	bne.n	8007868 <_free_r+0x28>
 80078ac:	681c      	ldr	r4, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	6053      	str	r3, [r2, #4]
 80078b2:	4421      	add	r1, r4
 80078b4:	6011      	str	r1, [r2, #0]
 80078b6:	e7d7      	b.n	8007868 <_free_r+0x28>
 80078b8:	d902      	bls.n	80078c0 <_free_r+0x80>
 80078ba:	230c      	movs	r3, #12
 80078bc:	6003      	str	r3, [r0, #0]
 80078be:	e7d3      	b.n	8007868 <_free_r+0x28>
 80078c0:	6825      	ldr	r5, [r4, #0]
 80078c2:	1961      	adds	r1, r4, r5
 80078c4:	428b      	cmp	r3, r1
 80078c6:	bf04      	itt	eq
 80078c8:	6819      	ldreq	r1, [r3, #0]
 80078ca:	685b      	ldreq	r3, [r3, #4]
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	bf04      	itt	eq
 80078d0:	1949      	addeq	r1, r1, r5
 80078d2:	6021      	streq	r1, [r4, #0]
 80078d4:	6054      	str	r4, [r2, #4]
 80078d6:	e7c7      	b.n	8007868 <_free_r+0x28>
 80078d8:	b003      	add	sp, #12
 80078da:	bd30      	pop	{r4, r5, pc}
 80078dc:	200000b0 	.word	0x200000b0

080078e0 <_malloc_r>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	1ccd      	adds	r5, r1, #3
 80078e4:	f025 0503 	bic.w	r5, r5, #3
 80078e8:	3508      	adds	r5, #8
 80078ea:	2d0c      	cmp	r5, #12
 80078ec:	bf38      	it	cc
 80078ee:	250c      	movcc	r5, #12
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	4606      	mov	r6, r0
 80078f4:	db01      	blt.n	80078fa <_malloc_r+0x1a>
 80078f6:	42a9      	cmp	r1, r5
 80078f8:	d903      	bls.n	8007902 <_malloc_r+0x22>
 80078fa:	230c      	movs	r3, #12
 80078fc:	6033      	str	r3, [r6, #0]
 80078fe:	2000      	movs	r0, #0
 8007900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007902:	f000 f87d 	bl	8007a00 <__malloc_lock>
 8007906:	4921      	ldr	r1, [pc, #132]	; (800798c <_malloc_r+0xac>)
 8007908:	680a      	ldr	r2, [r1, #0]
 800790a:	4614      	mov	r4, r2
 800790c:	b99c      	cbnz	r4, 8007936 <_malloc_r+0x56>
 800790e:	4f20      	ldr	r7, [pc, #128]	; (8007990 <_malloc_r+0xb0>)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	b923      	cbnz	r3, 800791e <_malloc_r+0x3e>
 8007914:	4621      	mov	r1, r4
 8007916:	4630      	mov	r0, r6
 8007918:	f000 f862 	bl	80079e0 <_sbrk_r>
 800791c:	6038      	str	r0, [r7, #0]
 800791e:	4629      	mov	r1, r5
 8007920:	4630      	mov	r0, r6
 8007922:	f000 f85d 	bl	80079e0 <_sbrk_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d123      	bne.n	8007972 <_malloc_r+0x92>
 800792a:	230c      	movs	r3, #12
 800792c:	6033      	str	r3, [r6, #0]
 800792e:	4630      	mov	r0, r6
 8007930:	f000 f86c 	bl	8007a0c <__malloc_unlock>
 8007934:	e7e3      	b.n	80078fe <_malloc_r+0x1e>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	1b5b      	subs	r3, r3, r5
 800793a:	d417      	bmi.n	800796c <_malloc_r+0x8c>
 800793c:	2b0b      	cmp	r3, #11
 800793e:	d903      	bls.n	8007948 <_malloc_r+0x68>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	441c      	add	r4, r3
 8007944:	6025      	str	r5, [r4, #0]
 8007946:	e004      	b.n	8007952 <_malloc_r+0x72>
 8007948:	6863      	ldr	r3, [r4, #4]
 800794a:	42a2      	cmp	r2, r4
 800794c:	bf0c      	ite	eq
 800794e:	600b      	streq	r3, [r1, #0]
 8007950:	6053      	strne	r3, [r2, #4]
 8007952:	4630      	mov	r0, r6
 8007954:	f000 f85a 	bl	8007a0c <__malloc_unlock>
 8007958:	f104 000b 	add.w	r0, r4, #11
 800795c:	1d23      	adds	r3, r4, #4
 800795e:	f020 0007 	bic.w	r0, r0, #7
 8007962:	1ac2      	subs	r2, r0, r3
 8007964:	d0cc      	beq.n	8007900 <_malloc_r+0x20>
 8007966:	1a1b      	subs	r3, r3, r0
 8007968:	50a3      	str	r3, [r4, r2]
 800796a:	e7c9      	b.n	8007900 <_malloc_r+0x20>
 800796c:	4622      	mov	r2, r4
 800796e:	6864      	ldr	r4, [r4, #4]
 8007970:	e7cc      	b.n	800790c <_malloc_r+0x2c>
 8007972:	1cc4      	adds	r4, r0, #3
 8007974:	f024 0403 	bic.w	r4, r4, #3
 8007978:	42a0      	cmp	r0, r4
 800797a:	d0e3      	beq.n	8007944 <_malloc_r+0x64>
 800797c:	1a21      	subs	r1, r4, r0
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f82e 	bl	80079e0 <_sbrk_r>
 8007984:	3001      	adds	r0, #1
 8007986:	d1dd      	bne.n	8007944 <_malloc_r+0x64>
 8007988:	e7cf      	b.n	800792a <_malloc_r+0x4a>
 800798a:	bf00      	nop
 800798c:	200000b0 	.word	0x200000b0
 8007990:	200000b4 	.word	0x200000b4

08007994 <_realloc_r>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	4607      	mov	r7, r0
 8007998:	4614      	mov	r4, r2
 800799a:	460e      	mov	r6, r1
 800799c:	b921      	cbnz	r1, 80079a8 <_realloc_r+0x14>
 800799e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079a2:	4611      	mov	r1, r2
 80079a4:	f7ff bf9c 	b.w	80078e0 <_malloc_r>
 80079a8:	b922      	cbnz	r2, 80079b4 <_realloc_r+0x20>
 80079aa:	f7ff ff49 	bl	8007840 <_free_r>
 80079ae:	4625      	mov	r5, r4
 80079b0:	4628      	mov	r0, r5
 80079b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b4:	f000 f830 	bl	8007a18 <_malloc_usable_size_r>
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d20f      	bcs.n	80079dc <_realloc_r+0x48>
 80079bc:	4621      	mov	r1, r4
 80079be:	4638      	mov	r0, r7
 80079c0:	f7ff ff8e 	bl	80078e0 <_malloc_r>
 80079c4:	4605      	mov	r5, r0
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d0f2      	beq.n	80079b0 <_realloc_r+0x1c>
 80079ca:	4631      	mov	r1, r6
 80079cc:	4622      	mov	r2, r4
 80079ce:	f7ff ff0f 	bl	80077f0 <memcpy>
 80079d2:	4631      	mov	r1, r6
 80079d4:	4638      	mov	r0, r7
 80079d6:	f7ff ff33 	bl	8007840 <_free_r>
 80079da:	e7e9      	b.n	80079b0 <_realloc_r+0x1c>
 80079dc:	4635      	mov	r5, r6
 80079de:	e7e7      	b.n	80079b0 <_realloc_r+0x1c>

080079e0 <_sbrk_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d06      	ldr	r5, [pc, #24]	; (80079fc <_sbrk_r+0x1c>)
 80079e4:	2300      	movs	r3, #0
 80079e6:	4604      	mov	r4, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	f7fb f942 	bl	8002c74 <_sbrk>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_sbrk_r+0x1a>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_sbrk_r+0x1a>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	20000564 	.word	0x20000564

08007a00 <__malloc_lock>:
 8007a00:	4801      	ldr	r0, [pc, #4]	; (8007a08 <__malloc_lock+0x8>)
 8007a02:	f000 b811 	b.w	8007a28 <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	2000056c 	.word	0x2000056c

08007a0c <__malloc_unlock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__malloc_unlock+0x8>)
 8007a0e:	f000 b80c 	b.w	8007a2a <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	2000056c 	.word	0x2000056c

08007a18 <_malloc_usable_size_r>:
 8007a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1c:	1f18      	subs	r0, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfbc      	itt	lt
 8007a22:	580b      	ldrlt	r3, [r1, r0]
 8007a24:	18c0      	addlt	r0, r0, r3
 8007a26:	4770      	bx	lr

08007a28 <__retarget_lock_acquire_recursive>:
 8007a28:	4770      	bx	lr

08007a2a <__retarget_lock_release_recursive>:
 8007a2a:	4770      	bx	lr

08007a2c <_init>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	bf00      	nop
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr

08007a38 <_fini>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr
